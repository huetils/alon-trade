"""
This type stub file was generated by pyright.
"""

from typing import Callable, Union
from ...typing.abi import TypeStr
from hypothesis import strategies as st
from ..grammar import ABIType
from ..registry import BaseRegistry, Lookup

StrategyFactory = Callable[[ABIType, "StrategyRegistry"], st.SearchStrategy]
StrategyRegistration = Union[st.SearchStrategy, StrategyFactory]
class StrategyRegistry(BaseRegistry):
    def __init__(self) -> None:
        ...
    
    def register_strategy(self, lookup: Lookup, registration: StrategyRegistration, label: str = ...) -> None:
        ...
    
    def unregister_strategy(self, lookup_or_label: Lookup) -> None:
        ...
    
    def get_strategy(self, type_str: TypeStr) -> st.SearchStrategy:
        """
        Returns a hypothesis strategy for the given ABI type.

        :param type_str: The canonical string representation of the ABI type
            for which a hypothesis strategy should be returned.

        :returns: A hypothesis strategy for generating Python values that are
            encodable as values of the given ABI type.
        """
        ...
    


def get_uint_strategy(abi_type: ABIType, registry: StrategyRegistry) -> st.SearchStrategy:
    ...

def get_int_strategy(abi_type: ABIType, registry: StrategyRegistry) -> st.SearchStrategy:
    ...

address_strategy = ...
bool_strategy = ...
def get_ufixed_strategy(abi_type: ABIType, registry: StrategyRegistry) -> st.SearchStrategy:
    ...

def get_fixed_strategy(abi_type: ABIType, registry: StrategyRegistry) -> st.SearchStrategy:
    ...

def get_bytes_strategy(abi_type: ABIType, registry: StrategyRegistry) -> st.SearchStrategy:
    ...

bytes_strategy = ...
string_strategy = ...
def get_array_strategy(abi_type: ABIType, registry: StrategyRegistry) -> st.SearchStrategy:
    ...

def get_tuple_strategy(abi_type: ABIType, registry: StrategyRegistry) -> st.SearchStrategy:
    ...

strategy_registry = ...
get_abi_strategy = ...
