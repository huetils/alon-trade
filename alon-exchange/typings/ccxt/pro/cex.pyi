"""
This type stub file was generated by pyright.
"""

import ccxt.async_support
from ccxt.base.types import Balances, Int, Num, Order, OrderBook, OrderSide, OrderType, Str, Strings, Ticker, Tickers, Trade
from ccxt.async_support.base.ws.client import Client
from typing import List

class cex(ccxt.async_support.cex):
    def describe(self): # -> dict[Any, Any] | None:
        ...
    
    def request_id(self): # -> str:
        ...
    
    async def watch_balance(self, params=...) -> Balances:
        """
        watch balance and get the amount of funds available for trading or funds locked in orders

        https://cex.io/websocket-api#get-balance

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...
    
    def handle_balance(self, client: Client, message): # -> None:
        ...
    
    async def watch_trades(self, symbol: str, since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol. Note: can only watch one symbol at a time.

        https://cex.io/websocket-api#old-pair-room

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    def handle_trades_snapshot(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_old_trade(self, trade, market=...): # -> dict[Any, Any]:
        ...
    
    def handle_trade(self, client: Client, message): # -> None:
        ...
    
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """

        https://cex.io/websocket-api#ticker-subscription

        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.method]: public or private
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """

        https://cex.io/websocket-api#ticker-subscription

        watches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        :param str[]|None symbols: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of `ticker structures <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def fetch_ticker_ws(self, symbol: str, params=...) -> Ticker:
        """

        https://docs.cex.io/#ws-api-ticker-deprecated

        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the cex api endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    def handle_ticker(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_ticker(self, ticker, market=...): # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    
    async def fetch_balance_ws(self, params=...) -> Balances:
        """

        https://docs.cex.io/#ws-api-get-balance

        query for balance and get the amount of funds available for trading or funds locked in orders
        :param dict [params]: extra parameters specific to the cex api endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...
    
    async def watch_orders(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Order]:
        """
        get the list of orders associated with the user. Note: In CEX.IO system, orders can be present in trade engine or in archive database. There can be time periods(~2 seconds or more), when order is done/canceled, but still not moved to archive database. That means, you cannot see it using calls: archived-orders/open-orders.

        https://docs.cex.io/#ws-api-open-orders

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    async def watch_my_trades(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        get the list of trades associated with the user. Note: In CEX.IO system, orders can be present in trade engine or in archive database. There can be time periods(~2 seconds or more), when order is done/canceled, but still not moved to archive database. That means, you cannot see it using calls: archived-orders/open-orders.

        https://docs.cex.io/#ws-api-open-orders

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    def handle_transaction(self, client: Client, message): # -> None:
        ...
    
    def handle_my_trades(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_trade(self, trade, market=...): # -> dict[Any, Any]:
        ...
    
    def handle_order_update(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_order_update(self, order, market=...): # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    
    def from_precision(self, amount, scale): # -> str | None:
        ...
    
    def currency_from_precision(self, currency, amount): # -> str | None:
        ...
    
    def handle_orders_snapshot(self, client: Client, message): # -> None:
        ...
    
    async def watch_order_book(self, symbol: str, limit: Int = ..., params=...) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://cex.io/websocket-api#orderbook-subscribe

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    def handle_order_book_snapshot(self, client: Client, message): # -> None:
        ...
    
    def pair_to_symbol(self, pair): # -> str:
        ...
    
    def handle_order_book_update(self, client: Client, message): # -> None:
        ...
    
    def handle_delta(self, bookside, delta): # -> None:
        ...
    
    def handle_deltas(self, bookside, deltas): # -> None:
        ...
    
    async def watch_ohlcv(self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...) -> List[list]:
        """

        https://cex.io/websocket-api#minute-data

        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market. It will return the last 120 minutes with the selected timeframe and then 1m candle updates after that.
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents.
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...
    
    def handle_init_ohlcv(self, client: Client, message): # -> None:
        ...
    
    def handle_ohlcv24(self, client: Client, message):
        ...
    
    def handle_ohlcv1m(self, client: Client, message): # -> None:
        ...
    
    def handle_ohlcv(self, client: Client, message): # -> None:
        ...
    
    async def fetch_order_ws(self, id: str, symbol: Str = ..., params=...): # -> Order:
        """
        fetches information on an order made by the user

        https://docs.cex.io/#ws-api-get-order

        :param str id: the order id
        :param str symbol: not used by cex fetchOrder
        :param dict [params]: extra parameters specific to the cex api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def fetch_open_orders_ws(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...): # -> list[Any] | list[object]:
        """

        https://docs.cex.io/#ws-api-open-orders

        fetch all unfilled currently open orders
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch open orders for
        :param int [limit]: the maximum number of  open orders structures to retrieve
        :param dict [params]: extra parameters specific to the cex api endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def create_order_ws(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Num = ..., params=...) -> Order:
        """

        https://docs.cex.io/#ws-api-order-placement

        create a trade order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float price: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the kraken api endpoint
        :param boolean [params.maker_only]: Optional, maker only places an order only if offers best sell(<= max) or buy(>= max) price for self pair, if not order placement will be rejected with an error - "Order is not maker"
        :returns dict: an `order structure <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        ...
    
    async def edit_order_ws(self, id: str, symbol: str, type: OrderType, side: OrderSide, amount: Num = ..., price: Num = ..., params=...) -> Order:
        """
        edit a trade order

        https://docs.cex.io/#ws-api-cancel-replace

        :param str id: order id
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of the currency you want to trade in units of the base currency
        :param float|None [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the cex api endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        ...
    
    async def cancel_order_ws(self, id: str, symbol: Str = ..., params=...): # -> Order:
        """

        https://docs.cex.io/#ws-api-order-cancel

        cancels an open order
        :param str id: order id
        :param str symbol: not used by cex cancelOrder()
        :param dict [params]: extra parameters specific to the cex api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def cancel_orders_ws(self, ids: List[str], symbol: Str = ..., params=...): # -> list[Any] | list[object]:
        """
        cancel multiple orders

        https://docs.cex.io/#ws-api-mass-cancel-place

        :param str[] ids: order ids
        :param str symbol: not used by cex cancelOrders()
        :param dict [params]: extra parameters specific to the cex api endpoint
        :returns dict: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    def resolve_data(self, client: Client, message): # -> None:
        ...
    
    def handle_connected(self, client: Client, message):
        ...
    
    def handle_error_message(self, client: Client, message): # -> None:
        ...
    
    def handle_message(self, client: Client, message): # -> None:
        ...
    
    def handle_authentication_message(self, client: Client, message): # -> None:
        ...
    
    async def authenticate(self, params=...):
        ...
    


