"""
This type stub file was generated by pyright.
"""

import ccxt.async_support
from ccxt.base.types import Balances, Int, Liquidation, Num, Order, OrderBook, OrderSide, OrderType, Position, Str, Strings, Ticker, Tickers, Trade
from ccxt.async_support.base.ws.client import Client
from typing import Any, List

class binance(ccxt.async_support.binance):
    def describe(self): # -> dict[Any, Any] | None:
        ...
    
    def describe_data(self): # -> dict[str, Any]:
        ...
    
    def request_id(self, url): # -> float | int:
        ...
    
    def stream(self, type: Str, subscriptionHash: Str, numSubscriptions=...): # -> str | None:
        ...
    
    async def watch_liquidations(self, symbol: str, since: Int = ..., limit: Int = ..., params=...) -> List[Liquidation]:
        """
        watch the public liquidations of a trading pair

        https://developers.binance.com/docs/derivatives/usds-margined-futures/websocket-market-streams/Liquidation-Order-Streams
        https://developers.binance.com/docs/derivatives/coin-margined-futures/websocket-market-streams/Liquidation-Order-Streams

        :param str symbol: unified CCXT market symbol
        :param int [since]: the earliest time in ms to fetch liquidations for
        :param int [limit]: the maximum number of liquidation structures to retrieve
        :param dict [params]: exchange specific parameters for the bitmex api endpoint
        :returns dict: an array of `liquidation structures <https://github.com/ccxt/ccxt/wiki/Manual#liquidation-structure>`
        """
        ...
    
    async def watch_liquidations_for_symbols(self, symbols: List[str] = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Liquidation]:
        """
        watch the public liquidations of a trading pair

        https://developers.binance.com/docs/derivatives/usds-margined-futures/websocket-market-streams/All-Market-Liquidation-Order-Streams
        https://developers.binance.com/docs/derivatives/coin-margined-futures/websocket-market-streams/All-Market-Liquidation-Order-Streams

        :param str[] symbols: list of unified market symbols
        :param int [since]: the earliest time in ms to fetch liquidations for
        :param int [limit]: the maximum number of liquidation structures to retrieve
        :param dict [params]: exchange specific parameters for the bitmex api endpoint
        :returns dict: an array of `liquidation structures <https://github.com/ccxt/ccxt/wiki/Manual#liquidation-structure>`
        """
        ...
    
    def handle_liquidation(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_liquidation(self, liquidation, market=...): # -> dict[Any, Any]:
        ...
    
    async def watch_my_liquidations(self, symbol: str, since: Int = ..., limit: Int = ..., params=...) -> List[Liquidation]:
        """
        watch the private liquidations of a trading pair

        https://developers.binance.com/docs/derivatives/usds-margined-futures/user-data-streams/Event-Order-Update
        https://developers.binance.com/docs/derivatives/coin-margined-futures/user-data-streams/Event-Order-Update

        :param str symbol: unified CCXT market symbol
        :param int [since]: the earliest time in ms to fetch liquidations for
        :param int [limit]: the maximum number of liquidation structures to retrieve
        :param dict [params]: exchange specific parameters for the bitmex api endpoint
        :returns dict: an array of `liquidation structures <https://github.com/ccxt/ccxt/wiki/Manual#liquidation-structure>`
        """
        ...
    
    async def watch_my_liquidations_for_symbols(self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...) -> List[Liquidation]:
        """
        watch the private liquidations of a trading pair

        https://developers.binance.com/docs/derivatives/usds-margined-futures/user-data-streams/Event-Order-Update
        https://developers.binance.com/docs/derivatives/coin-margined-futures/user-data-streams/Event-Order-Update

        :param str[] symbols: list of unified market symbols
        :param int [since]: the earliest time in ms to fetch liquidations for
        :param int [limit]: the maximum number of liquidation structures to retrieve
        :param dict [params]: exchange specific parameters for the bitmex api endpoint
        :returns dict: an array of `liquidation structures <https://github.com/ccxt/ccxt/wiki/Manual#liquidation-structure>`
        """
        ...
    
    def handle_my_liquidation(self, client: Client, message): # -> None:
        ...
    
    async def watch_order_book(self, symbol: str, limit: Int = ..., params=...) -> OrderBook:
        """

        https://binance-docs.github.io/apidocs/spot/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/spot/en/#diff-depth-stream
        https://binance-docs.github.io/apidocs/futures/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/futures/en/#diff-book-depth-streams
        https://binance-docs.github.io/apidocs/delivery/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/delivery/en/#diff-book-depth-streams

        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    async def watch_order_book_for_symbols(self, symbols: List[str], limit: Int = ..., params=...) -> OrderBook:
        """

        https://binance-docs.github.io/apidocs/spot/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/spot/en/#diff-depth-stream
        https://binance-docs.github.io/apidocs/futures/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/futures/en/#diff-book-depth-streams
        https://binance-docs.github.io/apidocs/delivery/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/delivery/en/#diff-book-depth-streams

        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str[] symbols: unified array of symbols
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    async def un_watch_order_book_for_symbols(self, symbols: List[str], params=...) -> Any:
        """

        https://binance-docs.github.io/apidocs/spot/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/spot/en/#diff-depth-stream
        https://binance-docs.github.io/apidocs/futures/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/futures/en/#diff-book-depth-streams
        https://binance-docs.github.io/apidocs/delivery/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/delivery/en/#diff-book-depth-streams

        unWatches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str[] symbols: unified array of symbols
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    async def un_watch_order_book(self, symbol: str, params=...) -> Any:
        """

        https://binance-docs.github.io/apidocs/spot/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/spot/en/#diff-depth-stream
        https://binance-docs.github.io/apidocs/futures/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/futures/en/#diff-book-depth-streams
        https://binance-docs.github.io/apidocs/delivery/en/#partial-book-depth-streams
        https://binance-docs.github.io/apidocs/delivery/en/#diff-book-depth-streams

        unWatches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified array of symbols
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    async def fetch_order_book_ws(self, symbol: str, limit: Int = ..., params=...) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#order-book
        https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/websocket-api/Order-Book

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    def handle_fetch_order_book(self, client: Client, message): # -> None:
        ...
    
    async def fetch_order_book_snapshot(self, client, message, subscription): # -> None:
        ...
    
    def handle_delta(self, bookside, delta): # -> None:
        ...
    
    def handle_deltas(self, bookside, deltas): # -> None:
        ...
    
    def handle_order_book_message(self, client: Client, message, orderbook):
        ...
    
    def handle_order_book(self, client: Client, message): # -> None:
        ...
    
    def handle_order_book_subscription(self, client: Client, message, subscription): # -> None:
        ...
    
    def handle_subscription_status(self, client: Client, message):
        ...
    
    def handle_un_subscription(self, client: Client, subscription: dict): # -> None:
        ...
    
    async def watch_trades_for_symbols(self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        get the list of most recent trades for a list of symbols

        https://binance-docs.github.io/apidocs/spot/en/#aggregate-trade-streams
        https://binance-docs.github.io/apidocs/spot/en/#trade-streams
        https://binance-docs.github.io/apidocs/futures/en/#aggregate-trade-streams
        https://binance-docs.github.io/apidocs/delivery/en/#aggregate-trade-streams

        :param str[] symbols: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.name]: the name of the method to call, 'trade' or 'aggTrade', default is 'trade'
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    async def un_watch_trades_for_symbols(self, symbols: List[str], params=...) -> Any:
        """
        unsubscribes from the trades channel

        https://binance-docs.github.io/apidocs/spot/en/#aggregate-trade-streams
        https://binance-docs.github.io/apidocs/spot/en/#trade-streams
        https://binance-docs.github.io/apidocs/futures/en/#aggregate-trade-streams
        https://binance-docs.github.io/apidocs/delivery/en/#aggregate-trade-streams

        :param str[] symbols: unified symbol of the market to fetch trades for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.name]: the name of the method to call, 'trade' or 'aggTrade', default is 'trade'
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    async def un_watch_trades(self, symbol: str, params=...) -> Any:
        """
        unsubscribes from the trades channel

        https://binance-docs.github.io/apidocs/spot/en/#aggregate-trade-streams
        https://binance-docs.github.io/apidocs/spot/en/#trade-streams
        https://binance-docs.github.io/apidocs/futures/en/#aggregate-trade-streams
        https://binance-docs.github.io/apidocs/delivery/en/#aggregate-trade-streams

        :param str symbol: unified symbol of the market to fetch trades for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.name]: the name of the method to call, 'trade' or 'aggTrade', default is 'trade'
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    async def watch_trades(self, symbol: str, since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://binance-docs.github.io/apidocs/spot/en/#aggregate-trade-streams
        https://binance-docs.github.io/apidocs/spot/en/#trade-streams
        https://binance-docs.github.io/apidocs/futures/en/#aggregate-trade-streams
        https://binance-docs.github.io/apidocs/delivery/en/#aggregate-trade-streams

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.name]: the name of the method to call, 'trade' or 'aggTrade', default is 'trade'
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    def parse_ws_trade(self, trade, market=...) -> Trade:
        ...
    
    def handle_trade(self, client: Client, message): # -> None:
        ...
    
    async def watch_ohlcv(self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...) -> List[list]:
        """
        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market

        https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data
        https://binance-docs.github.io/apidocs/futures/en/#kline-candlestick-data
        https://binance-docs.github.io/apidocs/delivery/en/#kline-candlestick-data

        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param dict [params.timezone]: if provided, kline intervals are interpreted in that timezone instead of UTC, example '+08:00'
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...
    
    async def watch_ohlcv_for_symbols(self, symbolsAndTimeframes: List[List[str]], since: Int = ..., limit: Int = ..., params=...): # -> dict[Any, Any]:
        """
        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market

        https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data
        https://binance-docs.github.io/apidocs/futures/en/#kline-candlestick-data
        https://binance-docs.github.io/apidocs/delivery/en/#kline-candlestick-data

        :param str[][] symbolsAndTimeframes: array of arrays containing unified symbols and timeframes to fetch OHLCV data for, example [['BTC/USDT', '1m'], ['LTC/USDT', '5m']]
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param dict [params.timezone]: if provided, kline intervals are interpreted in that timezone instead of UTC, example '+08:00'
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...
    
    async def un_watch_ohlcv_for_symbols(self, symbolsAndTimeframes: List[List[str]], params=...) -> Any:
        """
        unWatches historical candlestick data containing the open, high, low, and close price, and the volume of a market

        https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data
        https://binance-docs.github.io/apidocs/futures/en/#kline-candlestick-data
        https://binance-docs.github.io/apidocs/delivery/en/#kline-candlestick-data

        :param str[][] symbolsAndTimeframes: array of arrays containing unified symbols and timeframes to fetch OHLCV data for, example [['BTC/USDT', '1m'], ['LTC/USDT', '5m']]
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param dict [params.timezone]: if provided, kline intervals are interpreted in that timezone instead of UTC, example '+08:00'
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...
    
    async def un_watch_ohlcv(self, symbol: str, timeframe=..., params=...) -> Any:
        """
        unWatches historical candlestick data containing the open, high, low, and close price, and the volume of a market

        https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data
        https://binance-docs.github.io/apidocs/futures/en/#kline-candlestick-data
        https://binance-docs.github.io/apidocs/delivery/en/#kline-candlestick-data

        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param dict [params.timezone]: if provided, kline intervals are interpreted in that timezone instead of UTC, example '+08:00'
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...
    
    def handle_ohlcv(self, client: Client, message): # -> None:
        ...
    
    async def fetch_ticker_ws(self, symbol: str, params=...) -> Ticker:
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.method]: method to use can be ticker.price or ticker.book
        :param boolean [params.returnRateLimits]: return the rate limits for the exchange
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def fetch_ohlcv_ws(self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...) -> List[list]:
        """
        query historical candlestick data containing the open, high, low, and close price, and the volume of a market

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#klines

        :param str symbol: unified symbol of the market to query OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int since: timestamp in ms of the earliest candle to fetch
        :param int limit: the maximum amount of candles to fetch
        :param dict params: extra parameters specific to the exchange API endpoint
        :param int params['until']: timestamp in ms of the earliest candle to fetch

 EXCHANGE SPECIFIC PARAMETERS
        :param str params['timeZone']: default=0(UTC)
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...
    
    def handle_fetch_ohlcv(self, client: Client, message): # -> None:
        ...
    
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """

        https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream
        https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams
        https://binance-docs.github.io/apidocs/futures/en/#all-market-mini-tickers-stream
        https://binance-docs.github.io/apidocs/futures/en/#individual-symbol-ticker-streams
        https://binance-docs.github.io/apidocs/delivery/en/#all-market-mini-tickers-stream
        https://binance-docs.github.io/apidocs/delivery/en/#individual-symbol-ticker-streams

        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.name]: stream to use can be ticker or miniTicker
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_mark_price(self, symbol: str, params=...) -> Ticker:
        """

        https://developers.binance.com/docs/derivatives/usds-margined-futures/websocket-market-streams/Mark-Price-Stream

        watches a mark price for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.use1sFreq]: *default is True* if set to True, the mark price will be updated every second, otherwise every 3 seconds
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_mark_prices(self, symbols: Strings = ..., params=...) -> Tickers:
        """

        https://developers.binance.com/docs/derivatives/usds-margined-futures/websocket-market-streams/Mark-Price-Stream-for-All-market

        watches the mark price for all markets
        :param str[] symbols: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.use1sFreq]: *default is True* if set to True, the mark price will be updated every second, otherwise every 3 seconds
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """

        https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream
        https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams
        https://binance-docs.github.io/apidocs/futures/en/#all-market-mini-tickers-stream
        https://binance-docs.github.io/apidocs/futures/en/#individual-symbol-ticker-streams
        https://binance-docs.github.io/apidocs/delivery/en/#all-market-mini-tickers-stream
        https://binance-docs.github.io/apidocs/delivery/en/#individual-symbol-ticker-streams

        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
        :param str[] symbols: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def un_watch_tickers(self, symbols: Strings = ..., params=...) -> Any:
        """

        https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream
        https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams
        https://binance-docs.github.io/apidocs/futures/en/#all-market-mini-tickers-stream
        https://binance-docs.github.io/apidocs/futures/en/#individual-symbol-ticker-streams
        https://binance-docs.github.io/apidocs/delivery/en/#all-market-mini-tickers-stream
        https://binance-docs.github.io/apidocs/delivery/en/#individual-symbol-ticker-streams

        unWatches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
        :param str[] symbols: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def un_watch_ticker(self, symbol: str, params=...) -> Any:
        """

        https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream
        https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams
        https://binance-docs.github.io/apidocs/futures/en/#all-market-mini-tickers-stream
        https://binance-docs.github.io/apidocs/futures/en/#individual-symbol-ticker-streams
        https://binance-docs.github.io/apidocs/delivery/en/#all-market-mini-tickers-stream
        https://binance-docs.github.io/apidocs/delivery/en/#individual-symbol-ticker-streams

        unWatches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_bids_asks(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches best bid & ask for symbols

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#symbol-order-book-ticker
        https://developers.binance.com/docs/derivatives/usds-margined-futures/websocket-market-streams/All-Book-Tickers-Stream
        https://developers.binance.com/docs/derivatives/coin-margined-futures/websocket-market-streams/All-Book-Tickers-Stream

        :param str[] symbols: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_multi_ticker_helper(self, methodName, channelName: str, symbols: Strings = ..., params=...): # -> dict[Any, Any]:
        ...
    
    def parse_ws_ticker(self, message, marketType): # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    
    def handle_ticker_ws(self, client: Client, message): # -> None:
        ...
    
    def handle_bids_asks(self, client: Client, message): # -> None:
        ...
    
    def handle_tickers(self, client: Client, message): # -> None:
        ...
    
    def handle_tickers_and_bids_asks(self, client: Client, message, methodType): # -> None:
        ...
    
    def get_message_hash(self, channelName: str, symbol: Str, isBidAsk: bool): # -> str:
        ...
    
    def sign_params(self, params=...): # -> OrderedDict[Any, Any]:
        ...
    
    async def authenticate(self, params=...): # -> None:
        ...
    
    async def keep_alive_listen_key(self, params=...): # -> None:
        ...
    
    def set_balance_cache(self, client: Client, type, isPortfolioMargin=...): # -> None:
        ...
    
    async def load_balance_snapshot(self, client, messageHash, type, isPortfolioMargin): # -> None:
        ...
    
    async def fetch_balance_ws(self, params=...) -> Balances:
        """
        fetch balance and get the amount of funds available for trading or funds locked in orders

        https://developers.binance.com/docs/derivatives/usds-margined-futures/account/websocket-api/Futures-Account-Balance
        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#account-information-user_data

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str|None [params.type]: 'future', 'delivery', 'savings', 'funding', or 'spot'
        :param str|None [params.marginMode]: 'cross' or 'isolated', for margin trading, uses self.options.defaultMarginMode if not passed, defaults to None/None/None
        :param str[]|None [params.symbols]: unified market symbols, only used in isolated margin mode
        :param str|None [params.method]: method to use. Can be account.balance, account.status, v2/account.balance or v2/account.status
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...
    
    def handle_balance_ws(self, client: Client, message): # -> None:
        ...
    
    def handle_account_status_ws(self, client: Client, message): # -> None:
        ...
    
    async def fetch_position_ws(self, symbol: str, params=...) -> List[Position]:
        """

        https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Position-Information

        fetch data on an open position
        :param str symbol: unified market symbol of the market the position is held in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `position structure <https://docs.ccxt.com/#/?id=position-structure>`
        """
        ...
    
    async def fetch_positions_ws(self, symbols: Strings = ..., params=...) -> List[Position]:
        """
        fetch all open positions

        https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Position-Information

        :param str[] [symbols]: list of unified market symbols
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.returnRateLimits]: set to True to return rate limit informations, defaults to False.
        :param str|None [params.method]: method to use. Can be account.position or v2/account.position
        :returns dict[]: a list of `position structure <https://docs.ccxt.com/#/?id=position-structure>`
        """
        ...
    
    def handle_positions_ws(self, client: Client, message): # -> None:
        ...
    
    async def watch_balance(self, params=...) -> Balances:
        """
        watch balance and get the amount of funds available for trading or funds locked in orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.portfolioMargin]: set to True if you would like to watch the balance of a portfolio margin account
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...
    
    def handle_balance(self, client: Client, message): # -> None:
        ...
    
    def get_market_type(self, method, market, params=...): # -> Literal['future', 'delivery']:
        ...
    
    async def create_order_ws(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Num = ..., params=...) -> Order:
        """
        create a trade order

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#place-new-order-trade
        https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/New-Order

        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float|None [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean params['test']: test order, default False
        :param boolean params['returnRateLimits']: set to True to return rate limit information, default False
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    def handle_order_ws(self, client: Client, message): # -> None:
        ...
    
    def handle_orders_ws(self, client: Client, message): # -> None:
        ...
    
    async def edit_order_ws(self, id: str, symbol: str, type: OrderType, side: OrderSide, amount: Num = ..., price: Num = ..., params=...) -> Order:
        """
        edit a trade order

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#cancel-and-replace-order-trade
        https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Modify-Order

        :param str id: order id
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of the currency you want to trade in units of the base currency
        :param float|None [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    def handle_edit_order_ws(self, client: Client, message): # -> None:
        ...
    
    async def cancel_order_ws(self, id: str, symbol: Str = ..., params=...) -> Order:
        """
        cancel multiple orders

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#cancel-order-trade
        https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Cancel-Order

        :param str id: order id
        :param str [symbol]: unified market symbol, default is None
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str|None [params.cancelRestrictions]: Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED.
        :returns dict: an list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def cancel_all_orders_ws(self, symbol: Str = ..., params=...):
        """
        cancel all open orders in a market

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#cancel-open-orders-trade

        :param str [symbol]: unified market symbol of the market to cancel orders in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def fetch_order_ws(self, id: str, symbol: Str = ..., params=...) -> Order:
        """
        fetches information on an order made by the user

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#query-order-user_data
        https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Query-Order

        :param str id: order id
        :param str [symbol]: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def fetch_orders_ws(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Order]:
        """
        fetches information on multiple orders made by the user

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#query-order-list-user_data

        :param str symbol: unified market symbol of the market orders were made in
        :param int|None [since]: the earliest time in ms to fetch orders for
        :param int|None [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.orderId]: order id to begin at
        :param int [params.startTime]: earliest time in ms to retrieve orders for
        :param int [params.endTime]: latest time in ms to retrieve orders for
        :param int [params.limit]: the maximum number of order structures to retrieve
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def fetch_closed_orders_ws(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Order]:
        """
        fetch closed orders

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#query-order-list-user_data

        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch open orders for
        :param int [limit]: the maximum number of open orders structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def fetch_open_orders_ws(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Order]:
        """
        fetch all unfilled currently open orders

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#current-open-orders-user_data

        :param str symbol: unified market symbol
        :param int|None [since]: the earliest time in ms to fetch open orders for
        :param int|None [limit]: the maximum number of open orders structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def watch_orders(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Order]:
        """
        watches information on multiple orders made by the user

        https://developers.binance.com/docs/binance-spot-api-docs/user-data-stream#order-update
        https://developers.binance.com/docs/margin_trading/trade-data-stream/Event-Order-Update
        https://developers.binance.com/docs/derivatives/usds-margined-futures/user-data-streams/Event-Order-Update

        :param str symbol: unified market symbol of the market the orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str|None [params.marginMode]: 'cross' or 'isolated', for spot margin
        :param boolean [params.portfolioMargin]: set to True if you would like to watch portfolio margin account orders
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    def parse_ws_order(self, order, market=...): # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    
    def handle_order_update(self, client: Client, message): # -> None:
        ...
    
    async def watch_positions(self, symbols: Strings = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Position]:
        """
        watch all open positions
        :param str[]|None symbols: list of unified market symbols
        :param number [since]: since timestamp
        :param number [limit]: limit
        :param dict params: extra parameters specific to the exchange API endpoint
        :param boolean [params.portfolioMargin]: set to True if you would like to watch positions in a portfolio margin account
        :returns dict[]: a list of `position structure <https://docs.ccxt.com/en/latest/manual.html#position-structure>`
        """
        ...
    
    def set_positions_cache(self, client: Client, type, symbols: Strings = ..., isPortfolioMargin=...): # -> None:
        ...
    
    async def load_positions_snapshot(self, client, messageHash, type, isPortfolioMargin): # -> None:
        ...
    
    def handle_positions(self, client, message): # -> None:
        ...
    
    def parse_ws_position(self, position, market=...): # -> dict[Any, Any]:
        ...
    
    async def fetch_my_trades_ws(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        fetch all trades made by the user

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#account-trade-history-user_data

        :param str symbol: unified market symbol
        :param int|None [since]: the earliest time in ms to fetch trades for
        :param int|None [limit]: the maximum number of trades structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.endTime]: the latest time in ms to fetch trades for
        :param int [params.fromId]: first trade Id to fetch
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...
    
    async def fetch_trades_ws(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        fetch all trades made by the user

        https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api#recent-trades

        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trades structures to retrieve, default=500, max=1000
        :param dict [params]: extra parameters specific to the exchange API endpoint

 EXCHANGE SPECIFIC PARAMETERS
        :param int [params.fromId]: trade ID to begin at
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...
    
    def handle_trades_ws(self, client: Client, message): # -> None:
        ...
    
    async def watch_my_trades(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        watches information on multiple trades made by the user
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.portfolioMargin]: set to True if you would like to watch trades in a portfolio margin account
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...
    
    def handle_my_trade(self, client: Client, message): # -> None:
        ...
    
    def handle_order(self, client: Client, message): # -> None:
        ...
    
    def handle_acount_update(self, client, message): # -> None:
        ...
    
    def handle_ws_error(self, client: Client, message): # -> None:
        ...
    
    def handle_message(self, client: Client, message): # -> None:
        ...
    


