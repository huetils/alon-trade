"""
This type stub file was generated by pyright.
"""

import ccxt.async_support
from ccxt.base.types import Int, OrderBook, Ticker, Trade
from ccxt.async_support.base.ws.client import Client
from typing import List

class huobijp(ccxt.async_support.huobijp):
    def describe(self): # -> dict[Any, Any] | None:
        ...
    
    def request_id(self): # -> str:
        ...
    
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    def handle_ticker(self, client: Client, message):
        ...
    
    async def watch_trades(self, symbol: str, since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    def handle_trades(self, client: Client, message):
        ...
    
    async def watch_ohlcv(self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...) -> List[list]:
        """
        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...
    
    def handle_ohlcv(self, client: Client, message): # -> None:
        ...
    
    async def watch_order_book(self, symbol: str, limit: Int = ..., params=...) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    def handle_order_book_snapshot(self, client: Client, message, subscription): # -> None:
        ...
    
    async def watch_order_book_snapshot(self, client, message, subscription): # -> None:
        ...
    
    def handle_delta(self, bookside, delta): # -> None:
        ...
    
    def handle_deltas(self, bookside, deltas): # -> None:
        ...
    
    def handle_order_book_message(self, client: Client, message, orderbook):
        ...
    
    def handle_order_book(self, client: Client, message): # -> None:
        ...
    
    def handle_order_book_subscription(self, client: Client, message, subscription): # -> None:
        ...
    
    def handle_subscription_status(self, client: Client, message):
        ...
    
    def handle_system_status(self, client: Client, message):
        ...
    
    def handle_subject(self, client: Client, message): # -> None:
        ...
    
    async def pong(self, client, message): # -> None:
        ...
    
    def handle_ping(self, client: Client, message): # -> None:
        ...
    
    def handle_error_message(self, client: Client, message): # -> Literal[False]:
        ...
    
    def handle_message(self, client: Client, message): # -> None:
        ...
    


