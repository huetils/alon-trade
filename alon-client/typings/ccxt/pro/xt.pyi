"""
This type stub file was generated by pyright.
"""

import ccxt.async_support
from ccxt.base.types import Balances, Int, Market, Order, OrderBook, Str, Strings, Ticker, Tickers, Trade
from ccxt.async_support.base.ws.client import Client
from typing import List

class xt(ccxt.async_support.xt):
    def describe(self): # -> dict[Any, Any] | None:
        ...
    
    async def get_listen_key(self, isContract: bool):
        """
 @ignore
        required for private endpoints
        :param str isContract: True for contract trades

        https://doc.xt.com/#websocket_privategetToken
        https://doc.xt.com/#futures_user_websocket_v2base

        :returns str: listen key / access token
        """
        ...
    
    def get_cache_index(self, orderbook, cache): # -> int:
        ...
    
    def handle_delta(self, orderbook, delta): # -> None:
        ...
    
    async def subscribe(self, name: str, access: str, methodName: str, market: Market = ..., symbols: List[str] = ..., params=...):
        """
 @ignore
        Connects to a websocket channel

        https://doc.xt.com/#websocket_privaterequestFormat
        https://doc.xt.com/#futures_market_websocket_v2base

        :param str name: name of the channel
        :param str access: public or private
        :param str methodName: the name of the CCXT class method
        :param dict [market]: CCXT market
        :param str[] [symbols]: unified market symbols
        :param dict params: extra parameters specific to the xt api
        :returns dict: data from the websocket stream
        """
        ...
    
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://doc.xt.com/#websocket_publictickerRealTime
        https://doc.xt.com/#futures_market_websocket_v2tickerRealTime
        https://doc.xt.com/#futures_market_websocket_v2aggTickerRealTime

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict params: extra parameters specific to the xt api endpoint
        :param str [params.method]: 'agg_ticker'(contract only) or 'ticker', default = 'ticker' - the endpoint that will be streamed
        :returns dict: a `ticker structure <https://docs.ccxt.com/en/latest/manual.html#ticker-structure>`
        """
        ...
    
    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://doc.xt.com/#websocket_publicallTicker
        https://doc.xt.com/#futures_market_websocket_v2allTicker
        https://doc.xt.com/#futures_market_websocket_v2allAggTicker

        :param str [symbols]: unified market symbols
        :param dict params: extra parameters specific to the xt api endpoint
        :param str [params.method]: 'agg_tickers'(contract only) or 'tickers', default = 'tickers' - the endpoint that will be streamed
        :returns dict: a `ticker structure <https://docs.ccxt.com/en/latest/manual.html#ticker-structure>`
        """
        ...
    
    async def watch_ohlcv(self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...) -> List[list]:
        """
        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market

        https://doc.xt.com/#websocket_publicsymbolKline
        https://doc.xt.com/#futures_market_websocket_v2symbolKline

        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, or 1M
        :param int [since]: not used by xt watchOHLCV
        :param int [limit]: not used by xt watchOHLCV
        :param dict params: extra parameters specific to the xt api endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...
    
    async def watch_trades(self, symbol: str, since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://doc.xt.com/#websocket_publicdealRecord
        https://doc.xt.com/#futures_market_websocket_v2dealRecord

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict params: extra parameters specific to the xt api endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/en/latest/manual.html?#public-trades>`
        """
        ...
    
    async def watch_order_book(self, symbol: str, limit: Int = ..., params=...) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://doc.xt.com/#websocket_publiclimitDepth
        https://doc.xt.com/#websocket_publicincreDepth
        https://doc.xt.com/#futures_market_websocket_v2limitDepth
        https://doc.xt.com/#futures_market_websocket_v2increDepth

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: not used by xt watchOrderBook
        :param dict params: extra parameters specific to the xt api endpoint
        :param int [params.levels]: 5, 10, 20, or 50
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/en/latest/manual.html#order-book-structure>` indexed by market symbols
        """
        ...
    
    async def watch_orders(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Order]:
        """
        watches information on multiple orders made by the user

        https://doc.xt.com/#websocket_privateorderChange
        https://doc.xt.com/#futures_user_websocket_v2order

        :param str [symbol]: unified market symbol
        :param int [since]: not used by xt watchOrders
        :param int [limit]: the maximum number of orders to return
        :param dict params: extra parameters specific to the xt api endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        ...
    
    async def watch_my_trades(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        watches information on multiple trades made by the user

        https://doc.xt.com/#websocket_privateorderDeal
        https://doc.xt.com/#futures_user_websocket_v2trade

        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of  orde structures to retrieve
        :param dict params: extra parameters specific to the kucoin api endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...
    
    async def watch_balance(self, params=...) -> Balances:
        """
        watches information on multiple orders made by the user

        https://doc.xt.com/#websocket_privatebalanceChange
        https://doc.xt.com/#futures_user_websocket_v2balance

        :param dict params: extra parameters specific to the xt api endpoint
        :returns dict[]: a list of `balance structures <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...
    
    def handle_ticker(self, client: Client, message: dict): # -> dict[Any, Any]:
        ...
    
    def handle_tickers(self, client: Client, message: dict): # -> dict[Any, Any]:
        ...
    
    def handle_ohlcv(self, client: Client, message: dict): # -> dict[Any, Any]:
        ...
    
    def handle_trade(self, client: Client, message: dict): # -> dict[Any, Any]:
        ...
    
    def handle_order_book(self, client: Client, message: dict): # -> None:
        ...
    
    def parse_ws_order_trade(self, trade: dict, market: Market = ...): # -> dict[Any, Any]:
        ...
    
    def parse_ws_order(self, order: dict, market: Market = ...): # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    
    def handle_order(self, client: Client, message: dict): # -> dict[Any, Any]:
        ...
    
    def handle_balance(self, client: Client, message: dict): # -> None:
        ...
    
    def handle_my_trades(self, client: Client, message: dict): # -> None:
        ...
    
    def handle_message(self, client: Client, message): # -> None:
        ...
    
    def ping(self, client: Client): # -> Literal['ping']:
        ...
    
    def handle_error_message(self, client: Client, message: dict): # -> None:
        ...
    


