"""
This type stub file was generated by pyright.
"""

import ccxt.async_support
from ccxt.base.types import Int, Market, OrderBook, Ticker, Trade
from ccxt.async_support.base.ws.client import Client
from typing import List

class coinone(ccxt.async_support.coinone):
    def describe(self): # -> dict[Any, Any] | None:
        ...
    
    async def watch_order_book(self, symbol: str, limit: Int = ..., params=...) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://docs.coinone.co.kr/reference/public-websocket-orderbook

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    def handle_order_book(self, client, message): # -> None:
        ...
    
    def handle_delta(self, bookside, delta): # -> None:
        ...
    
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://docs.coinone.co.kr/reference/public-websocket-ticker

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    def handle_ticker(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_ticker(self, ticker, market: Market = ...) -> Ticker:
        ...
    
    async def watch_trades(self, symbol: str, since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        watches information on multiple trades made in a market

        https://docs.coinone.co.kr/reference/public-websocket-trade

        :param str symbol: unified market symbol of the market trades were made in
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trade structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...
    
    def handle_trades(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_trade(self, trade: dict, market: Market = ...) -> Trade:
        ...
    
    def handle_error_message(self, client: Client, message): # -> bool:
        ...
    
    def handle_message(self, client: Client, message): # -> None:
        ...
    
    def ping(self, client: Client): # -> dict[str, str]:
        ...
    
    def handle_pong(self, client: Client, message):
        ...
    


