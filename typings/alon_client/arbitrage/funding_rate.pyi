"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from typing import Any

import ccxt
import ccxt.async_support
import ccxt.async_support.okx

API_KEY = ...
API_SECRET = ...
API_PASSWORD = ...
open_positions: dict[str, dict[str, Any]] = ...
latest_funding_rates: dict[str, dict[str, Any]] = ...
DEFAULT_CONFIG_FILE = ...

def load_config(config_file: str = ...) -> dict[str, Any]: ...
def setup_logger():  # -> Logger:
    ...

logger = ...
config = ...
defaults: dict[str, Any] = ...
configurations = ...

async def funding_rate_arbitrage():  # -> None:
    """
    Main entry for the strategy:
      1) Initialize OKX ccxt.pro client
      2) Load markets
      3) Spawn tasks
         - 'collector' tasks: gather funding rates for each symbol
         - 'analyzer': ranks and decides which trades to open
         - 'manage_positions': handles lifecycle (close after funding, etc.)
    Includes improved error handling with retries and logging.
    """
    ...

async def funding_rate_collector(
    exchange: ccxt.async_support.okx.okx, market: str
):  # -> None:
    """
    Continuously collects the latest funding rate for a single market
    and stores it in 'latest_funding_rates'. We do NOT open positions here.
    Improved error handling: if watch_funding_rate fails repeatedly,
    we do a short sleep between attempts.
    """
    ...

async def funding_rate_analyzer(exchange: Any):
    """
    Periodically checks the latest funding rates for all tracked symbols, ranks them,
    and decides which to open positions on. Enhanced logging & potential error checks.
    """
    ...

def parse_next_funding_time(nft_data: Any) -> datetime:
    """
    Parse 'nextFundingTime' from the exchange data if it's an int/float or a string.
    """
    ...

async def try_open_position(
    exchange: Any, symbol: str, direction: str, price: float, funding_rate: float
):  # -> None:
    """
    Attempts to open a new position if not already open. Includes better logging
    and a separate retry for fetching balances.
    """
    ...

async def robust_fetch_balance(exchange: Any, currency: str) -> float:
    """
    Safely fetch the free balance for a given currency, with limited retries and logging.
    """
    ...

async def place_stop_loss(
    exchange: Any, symbol: str, direction: str, entry_price: float, size: float
) -> str | None:
    """
    Attempt to place a stop-loss order. Returns the stop_order_id if successful, else None.
    Error handling with logs. Adjust param keys for OKX if needed.
    """
    ...

async def safe_cancel_order(exchange: Any, symbol: str, order_id: str):  # -> None:
    """
    Attempts to cancel an order, with logging. If it fails, we log the exception but continue.
    """
    ...

async def manage_positions(exchange: Any):
    """
    Periodic task that checks open positions, closes them after funding, etc.
    with improved logging and potential recovery from errors.
    """
    ...

async def close_position(exchange: Any, symbol: str):  # -> None:
    """
    Closes an open position by placing a market order in the opposite direction.
    Removes it from open_positions. Logs success/failure.
    """
    ...

if __name__ == "__main__": ...
