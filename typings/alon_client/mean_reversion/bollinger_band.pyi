"""
This type stub file was generated by pyright.
"""

import logging
from typing import Protocol, Union

from alon_client.candles import CandlestickChart
from ccxt.base.exchange import Exchange

class Logger:
    @staticmethod
    def setup_logger() -> logging.Logger: ...

class Strategy(Protocol):
    @property
    def length(self) -> int: ...
    @property
    def logger(self) -> logging.Logger: ...
    def apply_strategy(self, symbol: str, close_prices: list[float]) -> None: ...

class BollingerBandsStrategy(Strategy):
    def __init__(
        self, length: int, multiplier: float, logger: logging.Logger
    ) -> None: ...
    @property
    def length(self) -> int: ...
    @property
    def logger(self) -> logging.Logger: ...
    def compute_bollinger_bands(self, close_prices: list[float]) -> dict[str, float]:
        """
        Compute Bollinger Bands using TA-Lib.

        :param close_prices: list of close prices.
        :return: A dictionary containing the upper, middle, and lower bands.
        """
        ...

    def apply_strategy(self, symbol: str, close_prices: list[float]) -> None:
        """
        Apply the Bollinger Bands strategy to generate buy/sell signals.

        :param symbol: Trading pair (e.g., 'BTC/USDT').
        :param close_prices: list of close prices.
        """
        ...

async def fetch_ohlcv(
    exchange: Exchange, symbol: str, timeframe: str
) -> Union[list[list[float]], Exception]:
    """
    Fetch OHLCV data for a symbol from an exchange.

    :param exchange: CCXT exchange instance.
    :param symbol: Trading pair (e.g., 'BTC/USDT').
    :param timeframe: Timeframe for OHLCV data (e.g., '15m').
    :return: Latest OHLCV data or an exception.
    """
    ...

async def stream_ohlcv(
    exchange: Exchange,
    symbols: list[str],
    strategy: Strategy,
    chart: CandlestickChart,
    timeframe: str = ...,
) -> None:
    """
    Stream OHLCV data for the specified exchange and symbols.

    :param exchange: An instance of a CCXT exchange.
    :param symbols: list of trading pairs (e.g., ['BTC/USDT', 'ETH/USDT']).
    :param strategy: An instance of a class implementing the Strategy protocol.
    :param chart: Instance of the RealTimeCandlestickChart to visualize the data.
    :param timeframe: Timeframe for OHLCV data (default is '15m').
    """
    ...

async def initialize_exchange(exchange_id: str) -> Exchange:
    """
    Initialize and return a CCXT Pro exchange instance.

    :param exchange_id: The ID of the exchange (e.g., 'okx', 'binance').
    :return: An initialized CCXT Pro exchange instance.
    """
    ...

async def main() -> None:
    """
    Main function to stream OHLCV data and apply a generic strategy from multiple exchanges.
    """
    ...

if __name__ == "__main__": ...
