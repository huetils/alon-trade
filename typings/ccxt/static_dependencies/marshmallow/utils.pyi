"""
This type stub file was generated by pyright.
"""

import datetime as dt
import typing

"""Utility methods for marshmallow."""
EXCLUDE = ...
INCLUDE = ...
RAISE = ...
_UNKNOWN_VALUES = ...
class _Missing:
    def __bool__(self): # -> Literal[False]:
        ...
    
    def __copy__(self): # -> Self:
        ...
    
    def __deepcopy__(self, _): # -> Self:
        ...
    
    def __repr__(self): # -> Literal['<marshmallow.missing>']:
        ...
    


missing = ...
def is_generator(obj) -> bool:
    """Return True if ``obj`` is a generator"""
    ...

def is_iterable_but_not_string(obj) -> bool:
    """Return True if ``obj`` is an iterable object that isn't a string."""
    ...

def is_collection(obj) -> bool:
    """Return True if ``obj`` is a collection type, e.g list, tuple, queryset."""
    ...

def is_instance_or_subclass(val, class_) -> bool:
    """Return True if ``val`` is either a subclass or instance of ``class_``."""
    ...

def is_keyed_tuple(obj) -> bool:
    """Return True if ``obj`` has keyed tuple behavior, such as
    namedtuples or SQLAlchemy's KeyedTuples.
    """
    ...

def pprint(obj, *args, **kwargs) -> None:
    """Pretty-printing function that can pretty-print OrderedDicts
    like regular dictionaries. Useful for printing the output of
    :meth:`marshmallow.Schema.dump`.

    .. deprecated:: 3.7.0
        marshmallow.pprint will be removed in marshmallow 4.
    """
    ...

def is_aware(datetime: dt.datetime) -> bool:
    ...

def from_rfc(datestring: str) -> dt.datetime:
    """Parse a RFC822-formatted datetime string and return a datetime object.

    https://stackoverflow.com/questions/885015/how-to-parse-a-rfc-2822-date-time-into-a-python-datetime  # noqa: B950
    """
    ...

def rfcformat(datetime: dt.datetime) -> str:
    """Return the RFC822-formatted representation of a datetime object.

    :param datetime datetime: The datetime.
    """
    ...

_iso8601_datetime_re = ...
_iso8601_date_re = ...
_iso8601_time_re = ...
def get_fixed_timezone(offset: int | float | dt.timedelta) -> dt.timezone:
    """Return a tzinfo instance with a fixed offset from UTC."""
    ...

def from_iso_datetime(value): # -> datetime:
    """Parse a string and return a datetime.datetime.

    This function supports time zone offsets. When the input contains one,
    the output uses a timezone with a fixed offset from UTC.
    """
    ...

def from_iso_time(value): # -> time:
    """Parse a string and return a datetime.time.

    This function doesn't support time zone offsets.
    """
    ...

def from_iso_date(value): # -> date:
    """Parse a string and return a datetime.date."""
    ...

def from_timestamp(value: typing.Any) -> dt.datetime:
    ...

def from_timestamp_ms(value: typing.Any) -> dt.datetime:
    ...

def timestamp(value: dt.datetime) -> float:
    ...

def timestamp_ms(value: dt.datetime) -> float:
    ...

def isoformat(datetime: dt.datetime) -> str:
    """Return the ISO8601-formatted representation of a datetime object.

    :param datetime datetime: The datetime.
    """
    ...

def to_iso_time(time: dt.time) -> str:
    ...

def to_iso_date(date: dt.date) -> str:
    ...

def ensure_text_type(val: str | bytes) -> str:
    ...

def pluck(dictlist: list[dict[str, typing.Any]], key: str): # -> list[Any]:
    """Extracts a list of dictionary values from a list of dictionaries.
    ::

        >>> dlist = [{'id': 1, 'name': 'foo'}, {'id': 2, 'name': 'bar'}]
        >>> pluck(dlist, 'id')
        [1, 2]
    """
    ...

def get_value(obj, key: int | str, default=...): # -> Any:
    """Helper for pulling a keyed value off various types of objects. Fields use
    this method by default to access attributes of the source object. For object `x`
    and attribute `i`, this method first tries to access `x[i]`, and then falls back to
    `x.i` if an exception is raised.

    .. warning::
        If an object `x` does not raise an exception when `x[i]` does not exist,
        `get_value` will never check the value `x.i`. Consider overriding
        `marshmallow.fields.Field.get_value` in this case.
    """
    ...

def set_value(dct: dict[str, typing.Any], key: str, value: typing.Any): # -> None:
    """Set a value in a dict. If `key` contains a '.', it is assumed
    be a path (i.e. dot-delimited string) to the value's location.

    ::

        >>> d = {}
        >>> set_value(d, 'foo.bar', 42)
        >>> d
        {'foo': {'bar': 42}}
    """
    ...

def callable_or_raise(obj): # -> Callable[..., object]:
    """Check that an object is callable, else raise a :exc:`TypeError`."""
    ...

def get_func_args(func: typing.Callable) -> list[str]:
    """Given a callable, return a list of argument names. Handles
    `functools.partial` objects and class-based callables.

    .. versionchanged:: 3.0.0a1
        Do not return bound arguments, eg. ``self``.
    """
    ...

def resolve_field_instance(cls_or_instance): # -> FieldABC:
    """Return a Schema instance from a Schema class or instance.

    :param type|Schema cls_or_instance: Marshmallow Schema class or instance.
    """
    ...

def timedelta_to_microseconds(value: dt.timedelta) -> int:
    """Compute the total microseconds of a timedelta

    https://github.com/python/cpython/blob/bb3e0c240bc60fe08d332ff5955d54197f79751c/Lib/datetime.py#L665-L667  # noqa: B950
    """
    ...

def validate_unknown_parameter_value(obj: typing.Any) -> str:
    ...

