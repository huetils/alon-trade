"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Dict, List, Union
from ...marshmallow import Schema, post_load
from ..models.typed_data import StarkNetDomainDict, TypedDataDict

@dataclass(frozen=True)
class Parameter:
    """
    Dataclass representing a Parameter object
    """
    name: str
    type: str
    ...


@dataclass(frozen=True)
class TypedData:
    """
    Dataclass representing a TypedData object
    """
    types: Dict[str, List[Parameter]]
    primary_type: str
    domain: StarkNetDomainDict
    message: dict
    @staticmethod
    def from_dict(data: TypedDataDict) -> TypedData:
        """
        Create TypedData dataclass from dictionary.

        :param data: TypedData dictionary.
        :return: TypedData dataclass instance.
        """
        ...
    
    def type_hash(self, type_name: str) -> int:
        """
        Calculate the hash of a type name.

        :param type_name: Name of the type.
        :return: Hash of the type name.
        """
        ...
    
    def struct_hash(self, type_name: str, data: dict) -> int:
        """
        Calculate the hash of a struct.

        :param type_name: Name of the type.
        :param data: Data defining the struct.
        :return: Hash of the struct.
        """
        ...
    
    def message_hash(self, account_address: int) -> int:
        """
        Calculate the hash of the message.

        :param account_address: Address of an account.
        :return: Hash of the message.
        """
        ...
    


def get_hex(value: Union[int, str]) -> str:
    ...

def is_pointer(value: str) -> bool:
    ...

def strip_pointer(value: str) -> str:
    ...

class ParameterSchema(Schema):
    name = ...
    type = ...
    @post_load
    def make_dataclass(self, data, **kwargs) -> Parameter:
        ...
    


class TypedDataSchema(Schema):
    types = ...
    primary_type = ...
    domain = ...
    message = ...
    @post_load
    def make_dataclass(self, data, **kwargs) -> TypedData:
        ...
    


