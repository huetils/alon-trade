"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Sequence

from ...starkware.crypto.signature import ECSignature

MASK_250 = ...
HEX_PREFIX = ...

def compute_hash_on_elements(data: Sequence) -> int:
    """
    Computes a hash chain over the data, in the following order:
        h(h(h(h(0, data[0]), data[1]), ...), data[n-1]), n).

    The hash is initialized with 0 and ends with the data length appended.
    The length is appended in order to avoid collisions of the following kind:
    H([x,y,z]) = h(h(x,y),z) = H([w, z]) where w = h(x,y).
    """
    ...

def message_signature(
    msg_hash: int, priv_key: int, seed: Optional[int] = ...
) -> ECSignature:
    """
    Signs the message with private key.
    """
    ...

def encode_uint(value: int, bytes_length: int = ...) -> bytes: ...
def encode_uint_list(data: List[int]) -> bytes: ...
def get_bytes_length(value: int) -> int: ...
