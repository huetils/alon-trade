"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, Optional, Type, TypeVar

T = TypeVar("T")
class combomethod:
    def __init__(self, method: Callable[..., Any]) -> None:
        ...
    
    def __get__(self, obj: Optional[T] = ..., objtype: Optional[Type[T]] = ...) -> Callable[..., Any]:
        ...
    


def validate_conversion_arguments(to_wrap: Callable[..., T]) -> Callable[..., T]:
    """
    Validates arguments for conversion functions.
    - Only a single argument is present
    - Kwarg must be 'primitive' 'hexstr' or 'text'
    - If it is 'hexstr' or 'text' that it is a text type
    """
    ...

def return_arg_type(at_position: int) -> Callable[..., Callable[..., T]]:
    """
    Wrap the return value with the result of `type(args[at_position])`.
    """
    ...

def replace_exceptions(old_to_new_exceptions: Dict[Type[BaseException], Type[BaseException]]) -> Callable[[Callable[..., T]], Callable[..., T]]:
    """
    Replaces old exceptions with new exceptions to be raised in their place.
    """
    ...

