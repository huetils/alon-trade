"""
This type stub file was generated by pyright.
"""

import functools
from ...parsimonious import NodeVisitor

grammar = ...
class NodeVisitor(NodeVisitor):
    """
    Parsimonious node visitor which performs both parsing of type strings and
    post-processing of parse trees.  Parsing operations are cached.
    """
    grammar = ...
    def visit_non_zero_tuple(self, node, visited_children):
        ...
    
    def visit_tuple_type(self, node, visited_children): # -> TupleType:
        ...
    
    def visit_next_type(self, node, visited_children):
        ...
    
    def visit_zero_tuple(self, node, visited_children): # -> tuple[Any, ...]:
        ...
    
    def visit_basic_type(self, node, visited_children): # -> BasicType:
        ...
    
    def visit_two_size(self, node, visited_children): # -> tuple[Any, Any]:
        ...
    
    def visit_const_arr(self, node, visited_children): # -> tuple[Any]:
        ...
    
    def visit_dynam_arr(self, node, visited_children): # -> tuple[Any, ...]:
        ...
    
    def visit_alphas(self, node, visited_children):
        ...
    
    def visit_digits(self, node, visited_children): # -> int:
        ...
    
    def generic_visit(self, node, visited_children): # -> tuple[Any, ...] | None:
        ...
    
    @functools.lru_cache(maxsize=None)
    def parse(self, type_str): # -> Any:
        """
        Parses a type string into an appropriate instance of
        :class:`~eth_abi.grammar.ABIType`.  If a type string cannot be parsed,
        throws :class:`~eth_abi.exceptions.ParseError`.

        :param type_str: The type string to be parsed.
        :returns: An instance of :class:`~eth_abi.grammar.ABIType` containing
            information about the parsed type string.
        """
        ...
    


visitor = ...
class ABIType:
    """
    Base class for results of type string parsing operations.
    """
    __slots__ = ...
    def __init__(self, arrlist=..., node=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def to_type_str(self):
        """
        Returns the string representation of an ABI type.  This will be equal to
        the type string from which it was created.
        """
        ...
    
    @property
    def item_type(self):
        """
        If this type is an array type, equal to an appropriate
        :class:`~eth_abi.grammar.ABIType` instance for the array's items.
        """
        ...
    
    def validate(self):
        """
        Validates the properties of an ABI type against the solidity ABI spec:

        https://solidity.readthedocs.io/en/develop/abi-spec.html

        Raises :class:`~eth_abi.exceptions.ABITypeError` if validation fails.
        """
        ...
    
    def invalidate(self, error_msg):
        ...
    
    @property
    def is_array(self): # -> bool:
        """
        Equal to ``True`` if a type is an array type (i.e. if it has an array
        dimension list).  Otherwise, equal to ``False``.
        """
        ...
    
    @property
    def is_dynamic(self):
        """
        Equal to ``True`` if a type has a dynamically sized encoding.
        Otherwise, equal to ``False``.
        """
        ...
    


class TupleType(ABIType):
    """
    Represents the result of parsing a tuple type string e.g. "(int,bool)".
    """
    __slots__ = ...
    def __init__(self, components, arrlist=..., *, node=...) -> None:
        ...
    
    def to_type_str(self): # -> str:
        ...
    
    @property
    def item_type(self): # -> Self:
        ...
    
    def validate(self): # -> None:
        ...
    
    @property
    def is_dynamic(self): # -> bool:
        ...
    


class BasicType(ABIType):
    """
    Represents the result of parsing a basic type string e.g. "uint", "address",
    "ufixed128x19[][2]".
    """
    __slots__ = ...
    def __init__(self, base, sub=..., arrlist=..., *, node=...) -> None:
        ...
    
    def to_type_str(self):
        ...
    
    @property
    def item_type(self): # -> Self:
        ...
    
    @property
    def is_dynamic(self): # -> bool:
        ...
    
    def validate(self): # -> None:
        ...
    


TYPE_ALIASES = ...
TYPE_ALIAS_RE = ...
def normalize(type_str): # -> str:
    """
    Normalizes a type string into its canonical version e.g. the type string
    'int' becomes 'int256', etc.

    :param type_str: The type string to be normalized.
    :returns: The canonical version of the input type string.
    """
    ...

parse = ...
