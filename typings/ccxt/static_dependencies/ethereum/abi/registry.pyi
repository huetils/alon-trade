"""
This type stub file was generated by pyright.
"""

import abc
import functools
from typing import Any, Callable, Type, Union
from ..typing import abi
from . import decoding, encoding

Lookup = Union[abi.TypeStr, Callable[[abi.TypeStr], bool]]
EncoderCallable = Callable[[Any], bytes]
DecoderCallable = Callable[[decoding.ContextFramesBytesIO], Any]
Encoder = Union[EncoderCallable, Type[encoding.BaseEncoder]]
Decoder = Union[DecoderCallable, Type[decoding.BaseDecoder]]
class Copyable(abc.ABC):
    @abc.abstractmethod
    def copy(self): # -> None:
        ...
    
    def __copy__(self): # -> None:
        ...
    
    def __deepcopy__(self, *args): # -> None:
        ...
    


class PredicateMapping(Copyable):
    """
    Acts as a mapping from predicate functions to values.  Values are retrieved
    when their corresponding predicate matches a given input.  Predicates can
    also be labeled to facilitate removal from the mapping.
    """
    def __init__(self, name) -> None:
        ...
    
    def add(self, predicate, value, label=...): # -> None:
        ...
    
    def find(self, type_str): # -> Any:
        ...
    
    def remove_by_equality(self, predicate): # -> None:
        ...
    
    def remove_by_label(self, label): # -> None:
        ...
    
    def remove(self, predicate_or_label): # -> None:
        ...
    
    def copy(self): # -> Self:
        ...
    


class Predicate:
    """
    Represents a predicate function to be used for type matching in
    ``ABIRegistry``.
    """
    __slots__ = ...
    def __call__(self, *args, **kwargs):
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class Equals(Predicate):
    """
    A predicate that matches any input equal to `value`.
    """
    __slots__ = ...
    def __init__(self, value) -> None:
        ...
    
    def __call__(self, other):
        ...
    
    def __str__(self) -> str:
        ...
    


class BaseEquals(Predicate):
    """
    A predicate that matches a basic type string with a base component equal to
    `value` and no array component.  If `with_sub` is `True`, the type string
    must have a sub component to match.  If `with_sub` is `False`, the type
    string must *not* have a sub component to match.  If `with_sub` is None,
    the type string's sub component is ignored.
    """
    __slots__ = ...
    def __init__(self, base, *, with_sub=...) -> None:
        ...
    
    def __call__(self, type_str): # -> Literal[False]:
        ...
    
    def __str__(self) -> str:
        ...
    


def has_arrlist(type_str): # -> bool:
    """
    A predicate that matches a type string with an array dimension list.
    """
    ...

def is_base_tuple(type_str): # -> bool:
    """
    A predicate that matches a tuple type with no array dimension list.
    """
    ...

class BaseRegistry:
    ...


class ABIRegistry(Copyable, BaseRegistry):
    def __init__(self) -> None:
        ...
    
    @_clear_encoder_cache
    def register_encoder(self, lookup: Lookup, encoder: Encoder, label: str = ...) -> None:
        """
        Registers the given ``encoder`` under the given ``lookup``.  A unique
        string label may be optionally provided that can be used to refer to
        the registration by name.  For more information about arguments, refer
        to :any:`register`.
        """
        ...
    
    @_clear_encoder_cache
    def unregister_encoder(self, lookup_or_label: Lookup) -> None:
        """
        Unregisters an encoder in the registry with the given lookup or label.
        If ``lookup_or_label`` is a string, the encoder with the label
        ``lookup_or_label`` will be unregistered.  If it is an function, the
        encoder with the lookup function ``lookup_or_label`` will be
        unregistered.
        """
        ...
    
    @_clear_decoder_cache
    def register_decoder(self, lookup: Lookup, decoder: Decoder, label: str = ...) -> None:
        """
        Registers the given ``decoder`` under the given ``lookup``.  A unique
        string label may be optionally provided that can be used to refer to
        the registration by name.  For more information about arguments, refer
        to :any:`register`.
        """
        ...
    
    @_clear_decoder_cache
    def unregister_decoder(self, lookup_or_label: Lookup) -> None:
        """
        Unregisters a decoder in the registry with the given lookup or label.
        If ``lookup_or_label`` is a string, the decoder with the label
        ``lookup_or_label`` will be unregistered.  If it is an function, the
        decoder with the lookup function ``lookup_or_label`` will be
        unregistered.
        """
        ...
    
    def register(self, lookup: Lookup, encoder: Encoder, decoder: Decoder, label: str = ...) -> None:
        """
        Registers the given ``encoder`` and ``decoder`` under the given
        ``lookup``.  A unique string label may be optionally provided that can
        be used to refer to the registration by name.

        :param lookup: A type string or type string matcher function
            (predicate).  When the registry is queried with a type string
            ``query`` to determine which encoder or decoder to use, ``query``
            will be checked against every registration in the registry.  If a
            registration was created with a type string for ``lookup``, it will
            be considered a match if ``lookup == query``.  If a registration
            was created with a matcher function for ``lookup``, it will be
            considered a match if ``lookup(query) is True``.  If more than one
            registration is found to be a match, then an exception is raised.

        :param encoder: An encoder callable or class to use if ``lookup``
            matches a query.  If ``encoder`` is a callable, it must accept a
            python value and return a ``bytes`` value.  If ``encoder`` is a
            class, it must be a valid subclass of :any:`encoding.BaseEncoder`
            and must also implement the :any:`from_type_str` method on
            :any:`base.BaseCoder`.

        :param decoder: A decoder callable or class to use if ``lookup``
            matches a query.  If ``decoder`` is a callable, it must accept a
            stream-like object of bytes and return a python value.  If
            ``decoder`` is a class, it must be a valid subclass of
            :any:`decoding.BaseDecoder` and must also implement the
            :any:`from_type_str` method on :any:`base.BaseCoder`.

        :param label: An optional label that can be used to refer to this
            registration by name.  This label can be used to unregister an
            entry in the registry via the :any:`unregister` method and its
            variants.
        """
        ...
    
    def unregister(self, label: str) -> None:
        """
        Unregisters the entries in the encoder and decoder registries which
        have the label ``label``.
        """
        ...
    
    @functools.lru_cache(maxsize=None)
    def get_encoder(self, type_str): # -> BaseCoder | type[Any]:
        ...
    
    def has_encoder(self, type_str: abi.TypeStr) -> bool:
        """
        Returns ``True`` if an encoder is found for the given type string
        ``type_str``.  Otherwise, returns ``False``.  Raises
        :class:`~eth_abi.exceptions.MultipleEntriesFound` if multiple encoders
        are found.
        """
        ...
    
    @functools.lru_cache(maxsize=None)
    def get_decoder(self, type_str): # -> BaseCoder | type[Any]:
        ...
    
    def copy(self): # -> Self:
        """
        Copies a registry such that new registrations can be made or existing
        registrations can be unregistered without affecting any instance from
        which a copy was obtained.  This is useful if an existing registry
        fulfills most of a user's needs but requires one or two modifications.
        In that case, a copy of that registry can be obtained and the necessary
        changes made without affecting the original registry.
        """
        ...
    


registry = ...
registry_packed = ...
