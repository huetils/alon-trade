"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, SupportsIndex, Type, Union, overload

if TYPE_CHECKING: ...
BytesLike = Union[bool, bytearray, bytes, int, str, memoryview]

class HexBytes(bytes):
    """
    HexBytes is a *very* thin wrapper around the python built-in :class:`bytes` class.

    It has these three changes:
        1. Accepts more initializing values, like hex strings, non-negative integers,
           and booleans
        2. Returns hex with prefix '0x' from :meth:`HexBytes.hex`
        3. The representation at console is in hex
    """
    def __new__(cls: Type[bytes], val: BytesLike) -> HexBytes: ...
    def hex(
        self, sep: Union[str, bytes] = ..., bytes_per_sep: SupportsIndex = ...
    ) -> str:
        """
        Output hex-encoded bytes, with an "0x" prefix.

        Everything following the "0x" is output exactly like :meth:`bytes.hex`.
        """
        ...

    @overload
    def __getitem__(self, key: SupportsIndex) -> int: ...
    @overload
    def __getitem__(self, key: slice) -> HexBytes: ...
    def __getitem__(
        self, key: Union[SupportsIndex, slice]
    ) -> Union[int, bytes, HexBytes]: ...
    def __repr__(self) -> str: ...
