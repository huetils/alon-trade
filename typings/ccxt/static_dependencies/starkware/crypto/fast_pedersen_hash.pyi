"""
This type stub file was generated by pyright.
"""

from ...ecdsa.ellipticcurve import Point

curve_stark = ...
LOW_PART_BITS = ...
LOW_PART_MASK = ...
HASH_SHIFT_POINT = ...
P_0 = ...
P_1 = ...
P_2 = ...
P_3 = ...

def process_single_element(element: int, p1, p2) -> Point: ...
def pedersen_hash(x: int, y: int) -> int:
    """
    Computes the Starkware version of the Pedersen hash of x and y.
    The hash is defined by:
        shift_point + x_low * P_0 + x_high * P1 + y_low * P2  + y_high * P3
    where x_low is the 248 low bits of x, x_high is the 4 high bits of x and similarly for y.
    shift_point, P_0, P_1, P_2, P_3 are constant points generated from the digits of pi.
    """
    ...

def pedersen_hash_func(x: bytes, y: bytes) -> bytes:
    """
    A variant of 'pedersen_hash', where the elements and their resulting hash are in bytes.
    """
    ...
