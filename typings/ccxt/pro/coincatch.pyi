"""
This type stub file was generated by pyright.
"""

from typing import Any, List

import ccxt.async_support
from ccxt.async_support.base.ws.client import Client
from ccxt.base.types import (
    Balances,
    Int,
    Market,
    Order,
    OrderBook,
    Position,
    Str,
    Strings,
    Ticker,
    Tickers,
    Trade,
)

class coincatch(ccxt.async_support.coincatch):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    def get_market_from_arg(self, entry): ...
    async def authenticate(self, params=...): ...
    async def watch_public(self, messageHash, subscribeHash, args, params=...): ...
    async def un_watch_public(self, messageHash, args, params=...): ...
    async def watch_private(self, messageHash, subscribeHash, args, params=...): ...
    async def watch_private_multiple(
        self, messageHashes, subscribeHashes, args, params=...
    ): ...
    def handle_authenticate(self, client: Client, message):  # -> None:
        ...
    async def watch_public_multiple(
        self, messageHashes, subscribeHashes, argsArray, params=...
    ): ...
    async def un_watch_channel(
        self, symbol: str, channel: str, messageHashTopic: str, params=...
    ) -> Any: ...
    def get_public_inst_type_and_id(self, market: Market):  # -> list[Any]:
        ...
    def handle_dmcbl_market_by_message_hashes(
        self, market: Market, hash: str, client: Client, timeframe: Str = ...
    ):  # -> Market:
        ...
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://coincatch.github.io/github.io/en/spot/#tickers-channel

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.instType]: the type of the instrument to fetch the ticker for, 'SP' for spot markets, 'MC' for futures markets(default is 'SP')
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    async def un_watch_ticker(self, symbol: str, params=...) -> Any:
        """
        unsubscribe from the ticker channel

        https://coincatch.github.io/github.io/en/mix/#tickers-channel

        :param str symbol: unified symbol of the market to unwatch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns any: status of the unwatch request
        """
        ...

    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list

        https://coincatch.github.io/github.io/en/mix/#tickers-channel

        :param str[] symbols: unified symbol of the market to watch the tickers for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    def handle_ticker(self, client: Client, message):  # -> None:
        ...
    def parse_ws_ticker(
        self, ticker, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def watch_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[list]:
        """
        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market

        https://coincatch.github.io/github.io/en/spot/#candlesticks-channel

        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch(not including)
        :param int [limit]: the maximum amount of candles to fetch(not including)
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param bool [params.instType]: the type of the instrument to fetch the OHLCV data for, 'SP' for spot markets, 'MC' for futures markets(default is 'SP')
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...

    async def un_watch_ohlcv(self, symbol: str, timeframe=..., params=...) -> Any:
        """
               unsubscribe from the ohlcv channel

               https://www.bitget.com/api-doc/spot/websocket/public/Candlesticks-Channel

               :param str symbol: unified symbol of the market to unwatch the ohlcv for
        @param timeframe
               :param dict [params]: extra parameters specific to the exchange API endpoint
               :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    def handle_ohlcv(self, client: Client, message):  # -> None:
        ...
    def parse_ws_ohlcv(self, ohlcv, market: Market = ...) -> list: ...
    async def watch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://coincatch.github.io/github.io/en/spot/#depth-channel

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    async def un_watch_order_book(self, symbol: str, params=...) -> Any:
        """
        unsubscribe from the orderbook channel

        https://coincatch.github.io/github.io/en/spot/#depth-channel

        :param str symbol: unified symbol of the market to fetch the order book for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.limit]: orderbook limit, default is None
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    async def watch_order_book_for_symbols(
        self, symbols: List[str], limit: Int = ..., params=...
    ) -> OrderBook:
        """
               watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

               https://coincatch.github.io/github.io/en/spot/#depth-channel

        @param symbols
               :param int [limit]: the maximum amount of order book entries to return
               :param dict [params]: extra parameters specific to the exchange API endpoint
               :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    def handle_order_book(self, client: Client, message):  # -> None:
        ...
    async def handle_check_sum_error(
        self, client: Client, symbol: str, messageHash: str
    ):  # -> None:
        ...
    def handle_delta(self, bookside, delta):  # -> None:
        ...
    def handle_deltas(self, bookside, deltas):  # -> None:
        ...
    async def watch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://coincatch.github.io/github.io/en/spot/#trades-channel

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    async def watch_trades_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
               watches information on multiple trades made in a market

               https://coincatch.github.io/github.io/en/spot/#trades-channel

        @param symbols
               :param int [since]: the earliest time in ms to fetch orders for
               :param int [limit]: the maximum number of trade structures to retrieve
               :param dict [params]: extra parameters specific to the exchange API endpoint
               :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...

    async def un_watch_trades(self, symbol: str, params=...) -> Any:
        """
        unsubscribe from the trades channel

        https://coincatch.github.io/github.io/en/spot/#trades-channel

        :param str symbol: unified symbol of the market to unwatch the trades for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns any: status of the unwatch request
        """
        ...

    def handle_trades(self, client: Client, message):  # -> None:
        ...
    def parse_ws_trade(self, trade, market=...) -> Trade: ...
    async def watch_balance(self, params=...) -> Balances:
        """
        watch balance and get the amount of funds available for trading or funds locked in orders

        https://coincatch.github.io/github.io/en/spot/#account-channel
        https://coincatch.github.io/github.io/en/mix/#account-channel

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.type]: 'spot' or 'swap'(default is 'spot')
        :param str [params.instType]: *swap only* 'umcbl' or 'dmcbl'(default is 'umcbl')
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...

    def handle_balance(self, client: Client, message):  # -> None:
        ...
    async def watch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """
        watches information on multiple orders made by the user

        https://coincatch.github.io/github.io/en/spot/#order-channel
        https://coincatch.github.io/github.io/en/mix/#order-channel
        https://coincatch.github.io/github.io/en/mix/#plan-order-channel

        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.type]: 'spot' or 'swap'
        :param str [params.instType]: *swap only* 'umcbl' or 'dmcbl'(default is 'umcbl')
        :param bool [params.trigger]: *swap only* whether to watch trigger orders(default is False)
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    def handle_order(self, client: Client, message):  # -> None:
        ...
    def parse_ws_order(self, order: dict, market: Market = ...) -> Order: ...
    async def watch_positions(
        self, symbols: Strings = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Position]:
        """
               watch all open positions

               https://coincatch.github.io/github.io/en/mix/#positions-channel

               :param str[]|None symbols: list of unified market symbols
        @param since
        @param limit
               :param dict params: extra parameters specific to the exchange API endpoint
               :returns dict[]: a list of `position structure <https://docs.ccxt.com/en/latest/manual.html#position-structure>`
        """
        ...

    def get_private_inst_type(self, market: Market):  # -> Literal['dmcbl', 'umcbl']:
        ...
    def handle_positions(self, client: Client, message):  # -> None:
        ...
    def parse_ws_position(self, position, market=...):  # -> dict[Any, Any]:
        ...
    def handle_error_message(self, client: Client, message):  # -> bool:
        ...
    def handle_message(self, client: Client, message):  # -> None:
        ...
    def ping(self, client: Client):  # -> Literal['ping']:
        ...
    def handle_pong(self, client: Client, message): ...
    def handle_subscription_status(self, client: Client, message): ...
    def handle_un_subscription_status(self, client: Client, message): ...
    def handle_order_book_un_subscription(self, client: Client, message):  # -> None:
        ...
    def handle_trades_un_subscription(self, client: Client, message):  # -> None:
        ...
    def handle_ticker_un_subscription(self, client: Client, message):  # -> None:
        ...
    def handle_ohlcv_un_subscription(self, client: Client, message):  # -> None:
        ...
