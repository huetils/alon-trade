"""
This type stub file was generated by pyright.
"""

from typing import List

import ccxt.async_support
from ccxt.async_support.base.ws.client import Client
from ccxt.base.types import Balances, Int, Order, OrderBook, Str

class bitrue(ccxt.async_support.bitrue):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    async def watch_balance(self, params=...) -> Balances:
        """
        watch balance and get the amount of funds available for trading or funds locked in orders

        https://github.com/Bitrue-exchange/Spot-official-api-docs#balance-update

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...

    def handle_balance(self, client: Client, message):  # -> None:
        ...
    def parse_ws_balances(self, balances):  # -> None:
        ...
    async def watch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """
        watches information on user orders

        https://github.com/Bitrue-exchange/Spot-official-api-docs#order-update

        :param str symbol:
        :param int [since]: timestamp in ms of the earliest order
        :param int [limit]: the maximum amount of orders to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order structure <https://docs.ccxt.com/#/?id=order-structure>` indexed by market symbols
        """
        ...

    def handle_order(self, client: Client, message):  # -> None:
        ...
    def parse_ws_order(
        self, order, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def watch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook: ...
    def handle_order_book(self, client: Client, message):  # -> None:
        ...
    def parse_ws_order_type(self, typeId):  # -> str | None:
        ...
    def parse_ws_order_status(self, status):  # -> str | None:
        ...
    def handle_ping(self, client: Client, message):  # -> None:
        ...
    async def pong(self, client, message):  # -> None:
        ...
    def handle_message(self, client: Client, message):  # -> None:
        ...
    async def authenticate(self, params=...):  # -> dict[str, dict[str, str]]:
        ...
    async def keep_alive_listen_key(self, params=...):  # -> None:
        ...
