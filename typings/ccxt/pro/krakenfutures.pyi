"""
This type stub file was generated by pyright.
"""

import ccxt.async_support
from ccxt.base.types import Balances, Int, Order, OrderBook, Position, Str, Strings, Ticker, Tickers, Trade
from ccxt.async_support.base.ws.client import Client
from typing import List

class krakenfutures(ccxt.async_support.krakenfutures):
    def describe(self): # -> dict[Any, Any] | None:
        ...
    
    async def authenticate(self, params=...):
        """
 @ignore
        authenticates the user to access private web socket channels

        https://docs.futures.kraken.com/#websocket-api-public-feeds-challenge

        :returns dict: response from exchange
        """
        ...
    
    async def watch_order_book_for_symbols(self, symbols: List[str], limit: Int = ..., params=...) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://docs.futures.kraken.com/#websocket-api-public-feeds-challenge

        :param str[] symbols: unified array of symbols
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    async def subscribe_public(self, name: str, symbols: List[str], params=...):
        """
 @ignore
        Connects to a websocket channel
        :param str name: name of the channel
        :param str[] symbols: CCXT market symbols
        :param dict [params]: extra parameters specific to the krakenfutures api
        :returns dict: data from the websocket stream
        """
        ...
    
    async def subscribe_private(self, name: str, messageHash: str, params=...):
        """
 @ignore
        Connects to a websocket channel
        :param str name: name of the channel
        :param str messageHash: unique identifier for the message
        :param dict [params]: extra parameters specific to the krakenfutures api
        :returns dict: data from the websocket stream
        """
        ...
    
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://docs.futures.kraken.com/#websocket-api-public-feeds-ticker

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://docs.futures.kraken.com/#websocket-api-public-feeds-ticker

        :param str[] symbols: unified symbols of the markets to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_bids_asks(self, symbols: Strings = ..., params=...) -> Tickers:
        """

        https://docs.futures.kraken.com/#websocket-api-public-feeds-ticker-lite

        watches best bid & ask for symbols
        :param str[] symbols: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...
    
    async def watch_trades(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://docs.futures.kraken.com/#websocket-api-public-feeds-trade

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    async def watch_trades_for_symbols(self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """

        https://docs.futures.kraken.com/#websocket-api-public-feeds-trade

        get the list of most recent trades for a list of symbols
        :param str[] symbols: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...
    
    async def watch_order_book(self, symbol: str, limit: Int = ..., params=...) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://docs.futures.kraken.com/#websocket-api-public-feeds-book

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: not used by krakenfutures watchOrderBook
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...
    
    async def watch_positions(self, symbols: Strings = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Position]:
        """

        https://docs.futures.kraken.com/#websocket-api-private-feeds-open-positions

        watch all open positions
        :param str[]|None symbols: list of unified market symbols
 @param since
 @param limit
        :param dict params: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `position structure <https://docs.ccxt.com/en/latest/manual.html#position-structure>`
        """
        ...
    
    def handle_positions(self, client, message): # -> None:
        ...
    
    def parse_ws_position(self, position, market=...): # -> dict[Any, Any]:
        ...
    
    async def watch_orders(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Order]:
        """
        watches information on multiple orders made by the user

        https://docs.futures.kraken.com/#websocket-api-private-feeds-open-orders
        https://docs.futures.kraken.com/#websocket-api-private-feeds-open-orders-verbose

        :param str symbol: not used by krakenfutures watchOrders
        :param int [since]: not used by krakenfutures watchOrders
        :param int [limit]: not used by krakenfutures watchOrders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...
    
    async def watch_my_trades(self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...) -> List[Trade]:
        """
        watches information on multiple trades made by the user

        https://docs.futures.kraken.com/#websocket-api-private-feeds-fills

        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...
    
    async def watch_balance(self, params=...) -> Balances:
        """
        watches information on the user's account balance

        https://docs.futures.kraken.com/#websocket-api-private-feeds-balances

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.account]: can be either 'futures' or 'flex_futures'
        :returns dict} a object of wallet types each with a balance structure {@link https://docs.ccxt.com/#/?id=balance-structure:
        """
        ...
    
    def handle_trade(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_trade(self, trade, market=...): # -> dict[Any, Any]:
        ...
    
    def parse_ws_order_trade(self, trade, market=...): # -> dict[Any, Any]:
        ...
    
    def handle_order(self, client: Client, message):
        ...
    
    def handle_order_snapshot(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_order(self, order, market=...): # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    
    def handle_ticker(self, client: Client, message): # -> None:
        ...
    
    def handle_bid_ask(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_ticker(self, ticker, market=...): # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    
    def handle_order_book_snapshot(self, client: Client, message): # -> None:
        ...
    
    def handle_order_book(self, client: Client, message): # -> None:
        ...
    
    def handle_balance(self, client: Client, message): # -> None:
        ...
    
    def handle_my_trades(self, client: Client, message): # -> None:
        ...
    
    def parse_ws_my_trade(self, trade, market=...): # -> dict[Any, Any]:
        ...
    
    async def watch_multi_helper(self, unifiedName: str, channelName: str, symbols: Strings = ..., subscriptionArgs=..., params=...):
        ...
    
    def get_message_hash(self, unifiedElementName: str, subChannelName: Str = ..., symbol: Str = ...): # -> str:
        ...
    
    def handle_error_message(self, client: Client, message): # -> None:
        ...
    
    def handle_message(self, client, message): # -> None:
        ...
    
    def handle_authenticate(self, client: Client, message):
        """
 @ignore
        https://docs.futures.kraken.com/#websocket-api-websocket-api-introduction-sign-challenge-challenge
        """
        ...
    


