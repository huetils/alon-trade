"""
This type stub file was generated by pyright.
"""

from typing import List

import ccxt.async_support
from ccxt.async_support.base.ws.client import Client
from ccxt.base.types import Int, OrderBook, Strings, Ticker, Tickers, Trade

class p2b(ccxt.async_support.p2b):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    async def subscribe(self, name: str, messageHash: str, request, params=...):
        """
        @ignore
               Connects to a websocket channel
               :param str name: name of the channel
               :param str messageHash: string to look up in handler
               :param str[]|float[] request: endpoint parameters
               :param dict [params]: extra parameters specific to the p2b api
               :returns dict: data from the websocket stream
        """
        ...

    async def watch_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[list]:
        """
        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market. Can only subscribe to one timeframe at a time for each symbol

        https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#kline-candlestick

        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: 15m, 30m, 1h or 1d
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...

    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#last-price
        https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#market-status

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param dict [params.method]: 'state'(default) or 'price'
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """

        https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#last-price
        https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#market-status

        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
        :param str[] [symbols]: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param dict [params.method]: 'state'(default) or 'price'
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    async def watch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#deals

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    async def watch_trades_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a list of symbols

        https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#deals

        :param str[] symbols: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    async def watch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#depth-of-market

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: 1-100, default=100
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param float [params.interval]: 0, 0.00000001, 0.0000001, 0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1, interval of precision for order, default=0.001
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    def handle_ohlcv(self, client: Client, message): ...
    def handle_trade(self, client: Client, message): ...
    def handle_ticker(self, client: Client, message): ...
    def handle_order_book(self, client: Client, message):  # -> None:
        ...
    def handle_message(self, client: Client, message):  # -> None:
        ...
    def handle_error_message(self, client: Client, message):  # -> Literal[False]:
        ...
    def ping(self, client: Client):  # -> dict[str, Any]:
        """
               https://github.com/P2B-team/P2B-WSS-Public/blob/main/wss_documentation.md#ping
        @param client
        """
        ...

    def handle_pong(self, client: Client, message): ...
    def on_error(self, client: Client, error):  # -> None:
        ...
    def on_close(self, client: Client, error):  # -> None:
        ...
