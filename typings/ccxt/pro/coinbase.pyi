"""
This type stub file was generated by pyright.
"""

from typing import List

import ccxt.async_support
from ccxt.base.types import Int, Order, OrderBook, Str, Strings, Ticker, Tickers, Trade

class coinbase(ccxt.async_support.coinbase):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    async def subscribe(self, name: str, isPrivate: bool, symbol=..., params=...):
        """
        @ignore
               subscribes to a websocket channel

               https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-overview#subscribe

               :param str name: the name of the channel
               :param boolean isPrivate: whether the channel is private or not
               :param str [symbol]: unified market symbol
               :param dict [params]: extra parameters specific to the exchange API endpoint
               :returns dict: subscription to a websocket channel
        """
        ...

    async def subscribe_multiple(
        self, name: str, isPrivate: bool, symbols: Strings = ..., params=...
    ):
        """
        @ignore
               subscribes to a websocket channel

               https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-overview#subscribe

               :param str name: the name of the channel
               :param boolean isPrivate: whether the channel is private or not
               :param str[] [symbols]: unified market symbol
               :param dict [params]: extra parameters specific to the exchange API endpoint
               :returns dict: subscription to a websocket channel
        """
        ...

    def create_ws_auth(self, name: str, productIds: List[str]):  # -> dict[Any, Any]:
        ...
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-channels#ticker-channel

        :param str [symbol]: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-channels#ticker-batch-channel

        :param str[] [symbols]: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    def handle_tickers(self, client, message): ...
    def parse_ws_ticker(
        self, ticker, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def watch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-channels#market-trades-channel

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    async def watch_trades_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-channels#market-trades-channel

        :param str[] symbols: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    async def watch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """
        watches information on multiple orders made by the user

        https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-channels#user-channel

        :param str [symbol]: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def watch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-channels#level2-channel

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    async def watch_order_book_for_symbols(
        self, symbols: List[str], limit: Int = ..., params=...
    ) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://docs.cloud.coinbase.com/advanced-trade-api/docs/ws-channels#level2-channel

        :param str[] symbols: unified array of symbols
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    def handle_trade(self, client, message): ...
    def handle_order(self, client, message): ...
    def parse_ws_order(
        self, order, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    def handle_order_book_helper(self, orderbook, updates):  # -> None:
        ...
    def handle_order_book(self, client, message):  # -> None:
        ...
    def handle_subscription_status(self, client, message): ...
    def handle_heartbeats(self, client, message): ...
    def handle_message(self, client, message):  # -> None:
        ...
