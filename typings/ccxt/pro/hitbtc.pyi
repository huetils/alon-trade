"""
This type stub file was generated by pyright.
"""

from typing import List

import ccxt.async_support
from ccxt.async_support.base.ws.client import Client
from ccxt.base.types import (
    Balances,
    Int,
    Num,
    Order,
    OrderBook,
    OrderSide,
    OrderType,
    Str,
    Strings,
    Ticker,
    Tickers,
    Trade,
)

class hitbtc(ccxt.async_support.hitbtc):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    async def authenticate(self):
        """
        @ignore
               authenticates the user to access private web socket channels

               https://api.hitbtc.com/#socket-authentication

               :returns dict: response from exchange
        """
        ...

    async def subscribe_public(
        self, name: str, messageHashPrefix: str, symbols: Strings = ..., params=...
    ):
        """
        @ignore
               :param str name: websocket endpoint name
               :param str messageHashPrefix: prefix for the message hash
               :param str[] [symbols]: unified CCXT symbol(s)
               :param dict [params]: extra parameters specific to the hitbtc api
        """
        ...

    async def subscribe_private(self, name: str, symbol: Str = ..., params=...):
        """
        @ignore
               :param str name: websocket endpoint name
               :param str [symbol]: unified CCXT symbol
               :param dict [params]: extra parameters specific to the hitbtc api
        """
        ...

    async def trade_request(self, name: str, params=...):
        """
        @ignore
               :param str name: websocket endpoint name
               :param dict [params]: extra parameters specific to the hitbtc api
        """
        ...

    async def watch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://api.hitbtc.com/#subscribe-to-full-order-book
        https://api.hitbtc.com/#subscribe-to-partial-order-book
        https://api.hitbtc.com/#subscribe-to-partial-order-book-in-batches
        https://api.hitbtc.com/#subscribe-to-top-of-book
        https://api.hitbtc.com/#subscribe-to-top-of-book-in-batches

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.method]: 'orderbook/full', 'orderbook/{depth}/{speed}', 'orderbook/{depth}/{speed}/batch'
        :param int [params.depth]: 5 , 10, or 20(default)
        :param int [params.speed]: 100(default), 500, or 1000
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    def handle_order_book(self, client: Client, message):  # -> None:
        ...
    def handle_delta(self, bookside, delta):  # -> None:
        ...
    def handle_deltas(self, bookside, deltas):  # -> None:
        ...
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://api.hitbtc.com/#subscribe-to-ticker
        https://api.hitbtc.com/#subscribe-to-ticker-in-batches
        https://api.hitbtc.com/#subscribe-to-mini-ticker
        https://api.hitbtc.com/#subscribe-to-mini-ticker-in-batches

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.method]: 'ticker/{speed}'(default), or 'ticker/price/{speed}'
        :param str [params.speed]: '1s'(default), or '3s'
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str[] [symbols]:
        :param dict params: extra parameters specific to the exchange API endpoint
        :param str params['method']: 'ticker/{speed}' ,'ticker/price/{speed}', 'ticker/{speed}/batch'(default), or 'ticker/{speed}/price/batch''
        :param str params['speed']: '1s'(default), or '3s'
        :returns dict: a `ticker structure <https://docs.ccxt.com/en/latest/manual.html#ticker-structure>`
        """
        ...

    def handle_ticker(self, client: Client, message):  # -> None:
        ...
    def parse_ws_ticker(
        self, ticker, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def watch_bids_asks(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches best bid & ask for symbols

        https://api.hitbtc.com/#subscribe-to-top-of-book

        :param str[] symbols: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.method]: 'orderbook/top/{speed}' or 'orderbook/top/{speed}/batch(default)'
        :param str [params.speed]: '100ms'(default) or '500ms' or '1000ms'
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    def handle_bid_ask(self, client: Client, message):  # -> None:
        ...
    def parse_ws_bid_ask(
        self, ticker, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def watch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://api.hitbtc.com/#subscribe-to-trades

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    def handle_trades(self, client: Client, message): ...
    def parse_ws_trades(
        self,
        trades,
        market: object = ...,
        since: Int = ...,
        limit: Int = ...,
        params=...,
    ):  # -> list[Any] | list[object]:
        ...
    def parse_ws_trade(self, trade, market=...):  # -> dict[Any, Any]:
        ...
    async def watch_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[list]:
        """
        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market

        https://api.hitbtc.com/#subscribe-to-candles

        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str [timeframe]: the length of time each candle represents
        :param int [since]: not used by hitbtc watchOHLCV
        :param int [limit]: 0 â€“ 1000, default value = 0(no history returned)
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...

    def handle_ohlcv(self, client: Client, message): ...
    def parse_ws_ohlcv(self, ohlcv, market=...) -> list: ...
    async def watch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """
        watches information on multiple orders made by the user

        https://api.hitbtc.com/#subscribe-to-reports
        https://api.hitbtc.com/#subscribe-to-reports-2
        https://api.hitbtc.com/#subscribe-to-reports-3

        :param str [symbol]: unified CCXT market symbol
        :param int [since]: timestamp in ms of the earliest order to fetch
        :param int [limit]: the maximum amount of orders to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        ...

    def handle_order(self, client: Client, message): ...
    def handle_order_helper(self, client: Client, message, order):  # -> None:
        ...
    def parse_ws_order_trade(self, trade, market=...):  # -> dict[Any, Any]:
        ...
    def parse_ws_order(
        self, order, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def watch_balance(self, params=...) -> Balances:
        """
               watches balance updates, cannot subscribe to margin account balances

               https://api.hitbtc.com/#subscribe-to-spot-balances
               https://api.hitbtc.com/#subscribe-to-futures-balances

               :param dict [params]: extra parameters specific to the exchange API endpoint
               :param str [params.type]: 'spot', 'swap', or 'future'

        EXCHANGE SPECIFIC PARAMETERS
               :param str [params.mode]: 'updates' or 'batches'(default), 'updates' = messages arrive after balance updates, 'batches' = messages arrive at equal intervals if there were any updates
               :returns dict[]: a list of `balance structures <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...

    async def create_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ) -> Order:
        """
        create a trade order

        https://api.hitbtc.com/#create-new-spot-order
        https://api.hitbtc.com/#create-margin-order
        https://api.hitbtc.com/#create-futures-order

        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.marginMode]: 'cross' or 'isolated' only 'isolated' is supported for spot-margin, swap supports both, default is 'cross'
        :param bool [params.margin]: True for creating a margin order
        :param float [params.triggerPrice]: The price at which a trigger order is triggered at
        :param bool [params.postOnly]: if True, the order will only be posted to the order book and not executed immediately
        :param str [params.timeInForce]: "GTC", "IOC", "FOK", "Day", "GTD"
        :returns dict: an `order structure <https://github.com/ccxt/ccxt/wiki/Manual#order-structure>`
        """
        ...

    async def cancel_order_ws(self, id: str, symbol: Str = ..., params=...) -> Order:
        """

        https://api.hitbtc.com/#cancel-spot-order-2
        https://api.hitbtc.com/#cancel-futures-order-2
        https://api.hitbtc.com/#cancel-margin-order-2

        cancels an open order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.marginMode]: 'cross' or 'isolated' only 'isolated' is supported
        :param bool [params.margin]: True for canceling a margin order
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def cancel_all_orders_ws(self, symbol: Str = ..., params=...):
        """

        https://api.hitbtc.com/#cancel-spot-orders
        https://api.hitbtc.com/#cancel-futures-order-3

        cancel all open orders
        :param str symbol: unified market symbol, only orders in the market of self symbol are cancelled when symbol is not None
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.marginMode]: 'cross' or 'isolated' only 'isolated' is supported
        :param bool [params.margin]: True for canceling margin orders
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def fetch_open_orders_ws(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """

        https://api.hitbtc.com/#get-active-futures-orders-2
        https://api.hitbtc.com/#get-margin-orders
        https://api.hitbtc.com/#get-active-spot-orders

        fetch all unfilled currently open orders
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch open orders for
        :param int [limit]: the maximum number of  open orders structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.marginMode]: 'cross' or 'isolated' only 'isolated' is supported
        :param bool [params.margin]: True for fetching open margin orders
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    def handle_balance(self, client: Client, message):  # -> None:
        ...
    def handle_notification(self, client: Client, message): ...
    def handle_order_request(self, client: Client, message): ...
    def handle_message(self, client: Client, message):  # -> None:
        ...
    def handle_authenticate(self, client: Client, message): ...
    def handle_error(self, client: Client, message):  # -> Literal[True] | None:
        ...
