"""
This type stub file was generated by pyright.
"""

from typing import List

import ccxt.async_support
from ccxt.async_support.base.ws.client import Client
from ccxt.base.types import Balances, Int, Order, OrderBook, Str, Ticker, Trade

class poloniexfutures(ccxt.async_support.poloniexfutures):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    async def negotiate(self, privateChannel, params=...): ...
    async def negotiate_helper(self, privateChannel, params=...):  # -> str | None:
        ...
    def request_id(self):  # -> float | int:
        ...
    async def subscribe(
        self,
        name: str,
        isPrivate: bool,
        symbol: Str = ...,
        subscription=...,
        params=...,
    ):
        """
        @ignore
               Connects to a websocket channel
               :param str name: name of the channel and suscriptionHash
               :param bool isPrivate: True for the authenticated url, False for the public url
               :param str symbol: is required for all public channels, not required for private channels(except position)
               :param dict subscription: subscription parameters
               :param dict [params]: extra parameters specific to the poloniex api
               :returns dict: data from the websocket stream
        """
        ...

    def on_close(self, client, error):  # -> None:
        ...
    async def stream(self, url, subscriptionHash):  # -> str:
        ...
    def handle_order_book_subscription(
        self, client: Client, message, subscription
    ):  # -> None:
        ...
    def handle_subscription_status(self, client: Client, message): ...
    def handle_new_stream(self, client: Client, message, subscription):  # -> None:
        ...
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://api-docs.poloniex.com/futures/websocket/public#get-real-time-symbol-ticker

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    async def watch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://api-docs.poloniex.com/futures/websocket/public#full-matching-engine-datalevel-3

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    async def watch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://api-docs.poloniex.com/futures/websocket/public#level-2-market-data

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: not used by poloniexfutures watchOrderBook
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.method]: the method to use. Defaults to /contractMarket/level2 can also be /contractMarket/level3v2 to receive the raw stream of orders
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    async def watch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """
        watches information on multiple orders made by the user

        https://api-docs.poloniex.com/futures/websocket/user-messages#private-messages

        :param str symbol: filter by unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.method]: the method to use will default to /contractMarket/tradeOrders. Set to /contractMarket/advancedOrders to watch stop orders
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def watch_balance(self, params=...) -> Balances:
        """
        watch balance and get the amount of funds available for trading or funds locked in orders

        https://api-docs.poloniex.com/futures/websocket/user-messages#account-balance-events

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...

    def handle_trade(self, client: Client, message): ...
    def parse_ws_trade(self, trade, market=...):  # -> dict[Any, Any]:
        ...
    def parse_ws_order_trade(self, trade, market=...):  # -> dict[Any, Any]:
        ...
    def handle_order(self, client: Client, message): ...
    def parse_order_status(self, status: str, type: str):  # -> str | None:
        """
        @ignore
               :param str status: "match", "open", "done"
               :param str type: "open", "match", "filled", "canceled", "update"
               :returns str:
        """
        ...

    def parse_ws_order(
        self, order, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    def handle_ticker(self, client: Client, message): ...
    def handle_l3_order_book(self, client: Client, message):  # -> None:
        ...
    def handle_level_2(self, client: Client, message):  # -> None:
        ...
    def handle_l2_order_book(self, client: Client, message):  # -> None:
        ...
    def hande_l2_snapshot(self, client: Client, message):  # -> None:
        ...
    def get_symbol_from_topic(self, topic: str):  # -> Str:
        ...
    def get_cache_index(self, orderbook, cache):  # -> int:
        ...
    def handle_delta(self, orderbook, delta):  # -> None:
        ...
    def handle_balance(self, client: Client, message): ...
    def parse_ws_balance(self, response):  # -> dict[Any, Any]:
        ...
    def handle_system_status(self, client: Client, message): ...
    def handle_subject(self, client: Client, message):  # -> None:
        ...
    def ping(self, client: Client):  # -> dict[str, str]:
        ...
    def handle_pong(self, client: Client, message): ...
    def handle_error_message(self, client: Client, message):  # -> None:
        ...
    def handle_message(self, client: Client, message):  # -> None:
        ...
    def handle_authenticate(self, client, message): ...
