"""
This type stub file was generated by pyright.
"""

from typing import List

import ccxt.async_support
from ccxt.async_support.base.ws.client import Client
from ccxt.base.types import (
    FundingRate,
    FundingRates,
    Int,
    Market,
    OrderBook,
    Strings,
    Ticker,
    Tickers,
    Trade,
)

class coinbaseinternational(ccxt.async_support.coinbaseinternational):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    async def subscribe(self, name: str, symbols: Strings = ..., params=...):
        """
        @ignore
               subscribes to a websocket channel

               https://docs.cloud.coinbase.com/intx/docs/websocket-overview#subscribe

               :param str name: the name of the channel
               :param str[] [symbols]: unified market symbol
               :param dict [params]: extra parameters specific to the exchange API endpoint
               :returns dict: subscription to a websocket channel
        """
        ...

    async def subscribe_multiple(self, name: str, symbols: Strings = ..., params=...):
        """
        @ignore
               subscribes to a websocket channel using watchMultiple

               https://docs.cloud.coinbase.com/intx/docs/websocket-overview#subscribe

               :param str name: the name of the channel
               :param string|str[] [symbols]: unified market symbol
               :param dict [params]: extra parameters specific to the exchange API endpoint
               :returns dict: subscription to a websocket channel
        """
        ...

    async def watch_funding_rate(self, symbol: str, params=...) -> FundingRate:
        """
        watch the current funding rate

        https://docs.cloud.coinbase.com/intx/docs/websocket-channels#funding-channel

        :param str symbol: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `funding rate structure <https://docs.ccxt.com/#/?id=funding-rate-structure>`
        """
        ...

    async def watch_funding_rates(self, symbols: List[str], params=...) -> FundingRates:
        """
        watch the funding rate for multiple markets

        https://docs.cloud.coinbase.com/intx/docs/websocket-channels#funding-channel

        :param str[]|None symbols: list of unified market symbols
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of `funding rates structures <https://docs.ccxt.com/#/?id=funding-rates-structure>`, indexe by market symbols
        """
        ...

    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://docs.cloud.coinbase.com/intx/docs/websocket-channels#instruments-channel

        :param str [symbol]: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.channel]: the channel to watch, 'LEVEL1' or 'INSTRUMENTS', default is 'LEVEL1'
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    def get_active_symbols(self):  # -> list[Any]:
        ...
    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://docs.cloud.coinbase.com/intx/docs/websocket-channels#instruments-channel

        :param str[] [symbols]: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.channel]: the channel to watch, 'LEVEL1' or 'INSTRUMENTS', default is 'INSTLEVEL1UMENTS'
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    def handle_instrument(self, client: Client, message):  # -> None:
        ...
    def parse_ws_instrument(
        self, ticker: dict, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    def handle_ticker(self, client: Client, message):  # -> None:
        ...
    def parse_ws_ticker(self, ticker: object, market: Market = ...) -> Ticker: ...
    async def watch_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[list]:
        """
        watches historical candlestick data containing the open, high, low, close price, and the volume of a market

        https://docs.cdp.coinbase.com/intx/docs/websocket-channels#candles-channel

        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...

    def handle_ohlcv(self, client: Client, message):  # -> None:
        ...
    async def watch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://docs.cloud.coinbase.com/intx/docs/websocket-channels#match-channel

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    async def watch_trades_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a list of symbols
        :param str[] symbols: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    def handle_trade(self, client, message): ...
    def parse_ws_trade(self, trade, market=...):  # -> dict[Any, Any]:
        ...
    async def watch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://docs.cloud.coinbase.com/intx/docs/websocket-channels#level2-channel

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    async def watch_order_book_for_symbols(
        self, symbols: List[str], limit: Int = ..., params=...
    ) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://docs.cloud.coinbase.com/intx/docs/websocket-channels#level2-channel

        :param str[] symbols:
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    def handle_order_book(self, client, message):  # -> None:
        ...
    def handle_delta(self, orderbook, delta):  # -> None:
        ...
    def handle_deltas(self, orderbook, deltas):  # -> None:
        ...
    def handle_subscription_status(self, client, message): ...
    def handle_funding_rate(self, client: Client, message):  # -> None:
        ...
    def handle_error_message(self, client: Client, message):  # -> bool:
        ...
    def handle_message(self, client, message):  # -> None:
        ...
