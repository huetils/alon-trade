"""
This type stub file was generated by pyright.
"""

from typing import List

import ccxt.async_support
from ccxt.async_support.base.ws.client import Client
from ccxt.base.types import (
    Balances,
    Int,
    Order,
    OrderBook,
    Str,
    Strings,
    Ticker,
    Tickers,
    Trade,
)

class mexc(ccxt.async_support.mexc):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    async def watch_ticker(self, symbol: str, params=...) -> Ticker:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#individual-symbol-book-ticker-streams
        https://mexcdevelop.github.io/apidocs/contract_v1_en/#public-channels
        https://mexcdevelop.github.io/apidocs/spot_v3_en/#miniticker

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.miniTicker]: set to True for using the miniTicker endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    def handle_ticker(self, client: Client, message):  # -> None:
        ...
    async def watch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#individual-symbol-book-ticker-streams
        https://mexcdevelop.github.io/apidocs/contract_v1_en/#public-channels
        https://mexcdevelop.github.io/apidocs/spot_v3_en/#minitickers

        :param str[] symbols: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.miniTicker]: set to True for using the miniTicker endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    def handle_tickers(self, client: Client, message):  # -> None:
        ...
    def parse_ws_ticker(
        self, ticker, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def watch_bids_asks(self, symbols: Strings = ..., params=...) -> Tickers:
        """

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#individual-symbol-book-ticker-streams

        watches best bid & ask for symbols
        :param str[] symbols: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    def handle_bid_ask(self, client: Client, message):  # -> None:
        ...
    def parse_ws_bid_ask(
        self, ticker, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def watch_spot_public(self, channel, messageHash, params=...): ...
    async def watch_spot_private(self, channel, messageHash, params=...): ...
    async def watch_swap_public(
        self, channel, messageHash, requestParams, params=...
    ): ...
    async def watch_swap_private(self, messageHash, params=...): ...
    async def watch_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[list]:
        """

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#kline-streams

        watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...

    def handle_ohlcv(self, client: Client, message):  # -> None:
        ...
    def parse_ws_ohlcv(self, ohlcv, market=...) -> list: ...
    async def watch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook:
        """

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#diff-depth-stream
        https://mexcdevelop.github.io/apidocs/contract_v1_en/#public-channels

        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    def handle_order_book_subscription(self, client: Client, message):  # -> None:
        ...
    def get_cache_index(self, orderbook, cache):  # -> int:
        ...
    def handle_order_book(self, client: Client, message):  # -> None:
        ...
    def handle_bookside_delta(self, bookside, bidasks):  # -> None:
        ...
    def handle_delta(self, orderbook, delta):  # -> None:
        ...
    async def watch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#trade-streams
        https://mexcdevelop.github.io/apidocs/contract_v1_en/#public-channels

        get the list of most recent trades for a particular symbol
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    def handle_trades(self, client: Client, message):  # -> None:
        ...
    async def watch_my_trades(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#spot-account-deals
        https://mexcdevelop.github.io/apidocs/contract_v1_en/#private-channels

        watches information on multiple trades made by the user
        :param str symbol: unified market symbol of the market trades were made in
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trade structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...

    def handle_my_trade(self, client: Client, message, subscription=...):  # -> None:
        ...
    def parse_ws_trade(self, trade, market=...):  # -> dict[Any, Any]:
        ...
    async def watch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#spot-account-orders
        https://mexcdevelop.github.io/apidocs/spot_v3_en/#margin-account-orders

        watches information on multiple orders made by the user
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str|None params['type']: the type of orders to retrieve, can be 'spot' or 'margin'
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    def handle_order(self, client: Client, message):  # -> None:
        ...
    def parse_ws_order(
        self, order, market=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    def parse_ws_order_status(self, status, market=...):  # -> str | None:
        ...
    def parse_ws_order_type(self, type):  # -> str | None:
        ...
    def parse_ws_time_in_force(self, timeInForce):  # -> str | None:
        ...
    async def watch_balance(self, params=...) -> Balances:
        """

        https://mexcdevelop.github.io/apidocs/spot_v3_en/#spot-account-upadte

        watch balance and get the amount of funds available for trading or funds locked in orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...

    def handle_balance(self, client: Client, message):  # -> None:
        ...
    async def authenticate(self, subscriptionHash, params=...):  # -> str | None:
        ...
    async def keep_alive_listen_key(self, listenKey, params=...):  # -> None:
        ...
    def handle_pong(self, client: Client, message): ...
    def handle_subscription_status(self, client: Client, message):  # -> None:
        ...
    def handle_message(self, client: Client, message):  # -> None:
        ...
    def ping(self, client: Client):  # -> dict[str, str]:
        ...
