"""
This type stub file was generated by pyright.
"""

from typing import List

from ccxt.abstract.vertex import ImplicitAPI
from ccxt.async_support.base.exchange import Exchange
from ccxt.base.types import (
    Balances,
    Currencies,
    Currency,
    FundingRate,
    FundingRates,
    Int,
    Market,
    Num,
    Order,
    OrderBook,
    OrderSide,
    OrderType,
    Str,
    Strings,
    Ticker,
    Tickers,
    Trade,
    TradingFees,
    Transaction,
)

class vertex(Exchange, ImplicitAPI):
    def describe(self):  # -> dict[Any, Any] | None:
        ...
    def set_sandbox_mode(self, enabled):  # -> None:
        ...
    def convert_to_x18(self, num):  # -> str | None:
        ...
    def convert_from_x18(self, num):  # -> str | None:
        ...
    async def fetch_currencies(self, params=...) -> Currencies:
        """
        fetches all available currencies on an exchange

        https://docs.vertexprotocol.com/developer-resources/api/v2/assets

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an associative dictionary of currencies
        """
        ...

    def parse_market(self, market) -> Market: ...
    async def fetch_markets(self, params=...) -> List[Market]:
        """
        retrieves data on all markets for vertex

        https://docs.vertexprotocol.com/developer-resources/api/gateway/queries/symbols

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: an array of objects representing market data
        """
        ...

    async def fetch_time(self, params=...):  # -> None:
        """
        fetches the current integer timestamp in milliseconds from the exchange server
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int: the current integer timestamp in milliseconds from the exchange server
        """
        ...

    async def fetch_status(self, params=...):  # -> dict[str, Any]:
        """
        the latest known information on the availability of the exchange API

        https://docs.vertexprotocol.com/developer-resources/api/gateway/queries/status

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `status structure <https://docs.ccxt.com/#/?id=exchange-status-structure>`
        """
        ...

    def parse_trade(self, trade, market: Market = ...) -> Trade: ...
    async def fetch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol

        https://docs.vertexprotocol.com/developer-resources/api/v2/trades

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        ...

    async def fetch_my_trades(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ):  # -> list[Any] | list[object]:
        """
        fetch all trades made by the user

        https://docs.vertexprotocol.com/developer-resources/api/archive-indexer/matches

        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trades structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.user]: user address, will default to self.walletAddress if not provided
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        ...

    async def fetch_order_book(
        self, symbol: str, limit: Int = ..., params=...
    ) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://docs.vertexprotocol.com/developer-resources/api/v2/orderbook

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        ...

    async def fetch_trading_fees(self, params=...) -> TradingFees:
        """
        fetch the trading fees for multiple markets

        https://docs.vertexprotocol.com/developer-resources/api/gateway/queries/fee-rates

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.user]: user address, will default to self.walletAddress if not provided
        :returns dict: a dictionary of `fee structures <https://docs.ccxt.com/#/?id=fee-structure>` indexed by market symbols
        """
        ...

    def parse_ohlcv(self, ohlcv, market: Market = ...) -> list: ...
    async def fetch_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[list]:
        """

        https://docs.vertexprotocol.com/developer-resources/api/archive-indexer/candlesticks

        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: max=1000, max=100 when since is defined and is less than(now - (999 * (timeframe in ms)))
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        ...

    def parse_funding_rate(self, ticker, market: Market = ...) -> FundingRate: ...
    async def fetch_funding_rate(self, symbol: str, params=...) -> FundingRate:
        """
        fetch the current funding rate

        https://docs.vertexprotocol.com/developer-resources/api/archive-indexer/funding-rate

        :param str symbol: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `funding rate structure <https://docs.ccxt.com/#/?id=funding-rate-structure>`
        """
        ...

    async def fetch_funding_rates(
        self, symbols: Strings = ..., params=...
    ) -> FundingRates:
        """
        fetches funding rates for multiple markets

        https://docs.vertexprotocol.com/developer-resources/api/v2/contracts

        :param str[] symbols: unified symbols of the markets to fetch the funding rates for, all market funding rates are returned if not assigned
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: an array of `funding rate structures <https://docs.ccxt.com/#/?id=funding-rate-structure>`
        """
        ...

    def parse_open_interest(
        self, interest, market: Market = ...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        ...
    async def fetch_open_interests(
        self, symbols: Strings = ..., params=...
    ):  # -> dict[Any, Any] | list[Any]:
        """
        Retrieves the open interest for a list of symbols

        https://docs.vertexprotocol.com/developer-resources/api/v2/contracts

        :param str[] [symbols]: a list of unified CCXT market symbols
        :param dict [params]: exchange specific parameters
        :returns dict[]: a list of `open interest structures <https://docs.ccxt.com/#/?id=open-interest-structure>`
        """
        ...

    async def fetch_open_interest(
        self, symbol: str, params=...
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        """
        Retrieves the open interest of a derivative trading pair

        https://docs.vertexprotocol.com/developer-resources/api/v2/contracts

        :param str symbol: Unified CCXT market symbol
        :param dict [params]: exchange specific parameters
        :returns dict} an open interest structure{@link https://docs.ccxt.com/#/?id=open-interest-structure:
        """
        ...

    def parse_ticker(self, ticker: dict, market: Market = ...) -> Ticker: ...
    async def fetch_tickers(self, symbols: Strings = ..., params=...) -> Tickers:
        """
        fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market

        https://docs.vertexprotocol.com/developer-resources/api/v2/tickers

        :param str[] [symbols]: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of `ticker structures <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        ...

    async def query_contracts(self, params=...) -> Currencies: ...
    def nonce(self): ...
    def hash_message(self, message): ...
    def sign_hash(self, hash, privateKey): ...
    def sign_message(self, message, privateKey): ...
    def build_sig(
        self, chainId, messageTypes, message, verifyingContractAddress=...
    ): ...
    def build_create_order_sig(self, message, chainId, verifyingContractAddress): ...
    def build_list_trigger_tx_sig(self, message, chainId, verifyingContractAddress): ...
    def build_cancel_all_orders_sig(
        self, message, chainId, verifyingContractAddress
    ): ...
    def build_cancel_orders_sig(self, message, chainId, verifyingContractAddress): ...
    def build_withdraw_sig(self, message, chainId, verifyingContractAddress): ...
    def convert_address_to_sender(self, address: str):  # -> str:
        ...
    def get_nonce(self, now, expiration):  # -> str | None:
        ...
    def get_expiration(self, now, timeInForce, postOnly, reduceOnly):  # -> str | None:
        ...
    def get_amount(self, amount, side):  # -> str | None:
        ...
    async def create_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        """
        create a trade order

        https://docs.vertexprotocol.com/developer-resources/api/gateway/executes/place-order
        https://docs.vertexprotocol.com/developer-resources/api/trigger/executes/place-order

        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.timeInForce]: ioc, fok
        :param bool [params.postOnly]: True or False whether the order is post-only
        :param bool [params.reduceOnly]: True or False whether the order is reduce-only, only works for ioc and fok order
        :param float [params.triggerPrice]: The price at which a trigger order is triggered at
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def edit_order(
        self,
        id: str,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: Num = ...,
        price: Num = ...,
        params=...,
    ):  # -> OrderedDict[Any, Any] | dict[Any, Any]:
        """
        edit a trade order

        https://docs.vertexprotocol.com/developer-resources/api/gateway/executes/cancel-and-place

        :param str id: cancel order id
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.timeInForce]: ioc, fok
        :param bool [params.postOnly]: True or False whether the order is post-only
        :param bool [params.reduceOnly]: True or False whether the order is reduce-only, only works for ioc and fok order
        :param float [params.triggerPrice]: The price at which a trigger order is triggered at
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    def parse_order_status(self, status):  # -> str | None:
        ...
    def parse_order(self, order, market: Market = ...) -> Order: ...
    def parse_time_in_force(self, timeInForce):  # -> str | None:
        ...
    async def fetch_order(self, id: str, symbol: Str = ..., params=...):  # -> Order:
        """
        fetches information on an order made by the user

        https://docs.vertexprotocol.com/developer-resources/api/gateway/queries/order

        :param str id: the order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def fetch_open_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """
        fetch all unfilled currently open orders

        https://docs.vertexprotocol.com/developer-resources/api/gateway/queries/orders
        https://docs.vertexprotocol.com/developer-resources/api/trigger/queries/list-trigger-orders

        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch open orders for
        :param int [limit]: the maximum number of open orders structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.trigger]: whether the order is a trigger/algo order
        :param str [params.user]: user address, will default to self.walletAddress if not provided
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def fetch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ) -> List[Order]:
        """
        fetches information on multiple orders made by the user

        https://docs.vertexprotocol.com/developer-resources/api/trigger/queries/list-trigger-orders

        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch open orders for
        :param int [limit]: the maximum number of open orders structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.trigger]: whether the order is a trigger/algo order
        :param str [params.user]: user address, will default to self.walletAddress if not provided
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def cancel_all_orders(self, symbol: Str = ..., params=...):  # -> Any:
        """

        https://docs.vertexprotocol.com/developer-resources/api/gateway/executes/cancel-product-orders
        https://docs.vertexprotocol.com/developer-resources/api/trigger/executes/cancel-product-orders

        cancel all open orders in a market
        :param str symbol: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param boolean [params.trigger]: whether the order is a trigger/algo order
        :returns dict: an list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def cancel_order(self, id: str, symbol: Str = ..., params=...):  # -> Any:
        """
        cancels an open order

        https://docs.vertexprotocol.com/developer-resources/api/gateway/executes/cancel-orders
        https://docs.vertexprotocol.com/developer-resources/api/trigger/executes/cancel-orders

        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def cancel_orders(
        self, ids: List[str], symbol: Str = ..., params=...
    ):  # -> Any:
        """
        cancel multiple orders

        https://docs.vertexprotocol.com/developer-resources/api/gateway/executes/cancel-orders
        https://docs.vertexprotocol.com/developer-resources/api/trigger/executes/cancel-orders

        :param str[] ids: order ids
        :param str [symbol]: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def fetch_balance(self, params=...) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders

        https://docs.vertexprotocol.com/developer-resources/api/gateway/queries/subaccount-info

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.user]: user address, will default to self.walletAddress if not provided
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        ...

    def parse_position(self, position, market: Market = ...):  # -> dict[Any, Any]:
        ...
    async def fetch_positions(
        self, symbols: Strings = ..., params=...
    ):  # -> dict[Any, Any] | list[Any]:
        """
        fetch all open positions

        https://docs.vertexprotocol.com/developer-resources/api/gateway/queries/subaccount-info

        :param str[] [symbols]: list of unified market symbols
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.user]: user address, will default to self.walletAddress if not provided
        :returns dict[]: a list of `position structure <https://docs.ccxt.com/#/?id=position-structure>`
        """
        ...

    async def query_nonces(self):  # -> dict[Any, Any]:
        ...
    async def withdraw(
        self, code: str, amount: float, address: str, tag=..., params=...
    ) -> Transaction:
        """
        make a withdrawal

        https://docs.vertexprotocol.com/developer-resources/api/withdrawing-on-chain

        :param str code: unified currency code
        :param float amount: the amount to withdraw
        :param str address: the address to withdraw to
        :param str tag:
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `transaction structure <https://docs.ccxt.com/#/?id=transaction-structure>`
        """
        ...

    def parse_transaction(
        self, transaction: dict, currency: Currency = ...
    ) -> Transaction: ...
    def parse_transaction_status(self, status: Str):  # -> str | None:
        ...
    def handle_public_address(self, methodName: str, params: dict):  # -> list[Any]:
        ...
    def handle_errors(
        self,
        code,
        reason,
        url,
        method,
        headers,
        body,
        response,
        requestHeaders,
        requestBody,
    ):  # -> None:
        ...
    def sign(
        self, path, api=..., method=..., params=..., headers=..., body=...
    ):  # -> dict[str, Any]:
        ...
