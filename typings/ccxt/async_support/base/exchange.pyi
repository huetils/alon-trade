"""
This type stub file was generated by pyright.
"""

import sys
from typing import Any, List

from ccxt.base.exchange import Exchange as BaseExchange
from ccxt.base.types import (
    CancellationRequest,
    Int,
    Num,
    OrderRequest,
    OrderSide,
    OrderType,
    Str,
    Strings,
)

__version__ = ...
__all__ = ["BaseExchange", "Exchange"]

class Exchange(BaseExchange):
    synchronous = ...
    streaming = ...
    ping = ...
    newUpdates = ...
    clients = ...
    timeout_on_exit = ...
    def __init__(self, config=...) -> None: ...
    def init_rest_rate_limiter(self):  # -> None:
        ...
    def get_event_loop(self):  # -> AbstractEventLoop:
        ...
    def get_session(self):  # -> ClientSession | None:
        ...
    def __del__(self):  # -> None:
        ...

    if sys.version_info >= (3, 5):
        async def __aenter__(self):  # -> Self:
            ...
        async def __aexit__(self, exc_type, exc, tb):  # -> None:
            ...

    def open(self):  # -> None:
        ...
    async def close(self):  # -> None:
        ...
    async def close_connector(self):  # -> None:
        ...
    async def close_proxy_sessions(self):  # -> None:
        ...
    async def fetch(self, url, method=..., headers=..., body=...):
        """Perform a HTTP request and return decoded JSON data"""
        ...

    async def load_markets_helper(self, reload=..., params=...):  # -> dict[Any, Any]:
        ...
    async def load_markets(self, reload=..., params=...):  # -> dict[Any, Any]:
        ...
    async def load_fees(self, reload=...):  # -> dict[Any, Any] | None:
        ...
    async def fetch_markets(self, params=...):  # -> list[Any]:
        ...
    async def fetch_currencies(self, params=...):  # -> dict[Any, Any] | None:
        ...
    async def fetchOHLCVC(
        self, symbol, timeframe=..., since=..., limit=..., params=...
    ): ...
    async def fetch_full_tickers(self, symbols=..., params=...): ...
    async def sleep(self, milliseconds):  # -> None:
        ...
    async def spawn_async(self, method, *args):  # -> None:
        ...
    def spawn(self, method, *args):  # -> Future:
        ...
    @staticmethod
    def inflate(data):  # -> bytes:
        ...
    @staticmethod
    def inflate64(data):  # -> bytes:
        ...
    @staticmethod
    def gunzip(data):  # -> str:
        ...
    def order_book(self, snapshot=..., depth=...):  # -> OrderBook:
        ...
    def indexed_order_book(self, snapshot=..., depth=...):  # -> IndexedOrderBook:
        ...
    def counted_order_book(self, snapshot=..., depth=...):  # -> CountedOrderBook:
        ...
    def client(self, url): ...
    def get_ws_proxy(self):  # -> None:
        ...
    def delay(self, timeout, method, *args):  # -> TimerHandle:
        ...
    def handle_message(self, client, message):  # -> dict[Any, Any]:
        ...
    def watch_multiple(
        self, url, message_hashes, message=..., subscribe_hashes=..., subscription=...
    ):  # -> Future:
        ...
    def watch(
        self, url, message_hash, message=..., subscribe_hash=..., subscription=...
    ): ...
    def on_connected(self, client, message=...):  # -> None:
        ...
    def on_error(self, client, error):  # -> None:
        ...
    def on_close(self, client, error):  # -> None:
        ...
    async def ws_close(self):  # -> None:
        ...
    async def load_order_book(
        self, client, messageHash, symbol, limit=..., params=...
    ):  # -> None:
        ...
    def format_scientific_notation_ftx(self, n):  # -> str:
        ...
    async def fetch_accounts(self, params=...): ...
    async def fetch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_trades_ws(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_liquidations(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_liquidations_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_my_liquidations(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ):  # -> Coroutine[Any, Any, NoReturn]:
        ...
    async def watch_my_liquidations_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_trades(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def un_watch_trades(self, symbol: str, params=...): ...
    async def watch_trades_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def un_watch_trades_for_symbols(self, symbols: List[str], params=...): ...
    async def watch_my_trades_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_orders_for_symbols(
        self, symbols: List[str], since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_ohlcv_for_symbols(
        self,
        symbolsAndTimeframes: List[List[str]],
        since: Int = ...,
        limit: Int = ...,
        params=...,
    ): ...
    async def un_watch_ohlcv_for_symbols(
        self, symbolsAndTimeframes: List[List[str]], params=...
    ): ...
    async def watch_order_book_for_symbols(
        self, symbols: List[str], limit: Int = ..., params=...
    ): ...
    async def un_watch_order_book_for_symbols(self, symbols: List[str], params=...): ...
    async def fetch_deposit_addresses(self, codes: Strings = ..., params=...): ...
    async def fetch_order_book(self, symbol: str, limit: Int = ..., params=...): ...
    async def fetch_order_book_ws(self, symbol: str, limit: Int = ..., params=...): ...
    async def fetch_margin_mode(self, symbol: str, params=...): ...
    async def fetch_margin_modes(self, symbols: Strings = ..., params=...): ...
    async def fetch_rest_order_book_safe(
        self, symbol, limit=..., params=...
    ):  # -> None:
        ...
    async def watch_order_book(self, symbol: str, limit: Int = ..., params=...): ...
    async def un_watch_order_book(self, symbol: str, params=...): ...
    async def fetch_time(self, params=...): ...
    async def fetch_trading_limits(self, symbols: Strings = ..., params=...): ...
    async def fetch_cross_borrow_rates(self, params=...): ...
    async def fetch_isolated_borrow_rates(self, params=...): ...
    async def fetch_leverage_tiers(self, symbols: Strings = ..., params=...): ...
    async def fetch_funding_rates(self, symbols: Strings = ..., params=...): ...
    async def fetch_funding_intervals(self, symbols: Strings = ..., params=...): ...
    async def watch_funding_rate(self, symbol: str, params=...): ...
    async def watch_funding_rates(self, symbols: List[str], params=...): ...
    async def watch_funding_rates_for_symbols(self, symbols: List[str], params=...): ...
    async def transfer(
        self, code: str, amount: float, fromAccount: str, toAccount: str, params=...
    ): ...
    async def withdraw(
        self, code: str, amount: float, address: str, tag=..., params=...
    ): ...
    async def create_deposit_address(self, code: str, params=...): ...
    async def set_leverage(self, leverage: Int, symbol: Str = ..., params=...): ...
    async def fetch_leverage(self, symbol: str, params=...): ...
    async def fetch_leverages(self, symbols: Strings = ..., params=...): ...
    async def set_position_mode(self, hedged: bool, symbol: Str = ..., params=...): ...
    async def add_margin(self, symbol: str, amount: float, params=...): ...
    async def reduce_margin(self, symbol: str, amount: float, params=...): ...
    async def set_margin(self, symbol: str, amount: float, params=...): ...
    async def fetch_long_short_ratio(
        self, symbol: str, timeframe: Str = ..., params=...
    ): ...
    async def fetch_long_short_ratio_history(
        self,
        symbol: Str = ...,
        timeframe: Str = ...,
        since: Int = ...,
        limit: Int = ...,
        params=...,
    ): ...
    async def fetch_margin_adjustment_history(
        self,
        symbol: Str = ...,
        type: Str = ...,
        since: Num = ...,
        limit: Num = ...,
        params=...,
    ):
        """
        fetches the history of margin added or reduced from contract isolated positions
        :param str [symbol]: unified market symbol
        :param str [type]: "add" or "reduce"
        :param int [since]: timestamp in ms of the earliest change to fetch
        :param int [limit]: the maximum amount of changes to fetch
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns dict[]: a list of `margin structures <https://docs.ccxt.com/#/?id=margin-loan-structure>`
        """
        ...

    async def set_margin_mode(self, marginMode: str, symbol: Str = ..., params=...): ...
    async def fetch_deposit_addresses_by_network(self, code: str, params=...): ...
    async def fetch_open_interest_history(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_open_interest(self, symbol: str, params=...): ...
    async def fetch_open_interests(self, symbols: Strings = ..., params=...): ...
    async def sign_in(self, params=...): ...
    async def fetch_payment_methods(self, params=...): ...
    async def fetch_borrow_rate(self, code: str, amount: float, params=...): ...
    async def repay_cross_margin(self, code: str, amount: float, params=...): ...
    async def repay_isolated_margin(
        self, symbol: str, code: str, amount: float, params=...
    ): ...
    async def borrow_cross_margin(self, code: str, amount: float, params=...): ...
    async def borrow_isolated_margin(
        self, symbol: str, code: str, amount: float, params=...
    ): ...
    async def borrow_margin(
        self, code: str, amount: float, symbol: Str = ..., params=...
    ): ...
    async def repay_margin(
        self, code: str, amount: float, symbol: Str = ..., params=...
    ): ...
    async def fetch_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_ohlcv_ws(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_web_endpoint(
        self, method, endpointMethod, returnAsJson, startRegex=..., endRegex=...
    ):  # -> Any | None:
        ...
    async def fetch_l2_order_book(self, symbol: str, limit: Int = ..., params=...): ...
    async def load_trading_limits(
        self, symbols: Strings = ..., reload=..., params=...
    ):  # -> dict[Any, Any] | None:
        ...
    async def fetch2(
        self,
        path,
        api: Any = ...,
        method=...,
        params=...,
        headers: Any = ...,
        body: Any = ...,
        config=...,
    ):  # -> None:
        ...
    async def request(
        self,
        path,
        api: Any = ...,
        method=...,
        params=...,
        headers: Any = ...,
        body: Any = ...,
        config=...,
    ):  # -> None:
        ...
    async def load_accounts(self, reload=..., params=...): ...
    async def edit_limit_buy_order(
        self, id: str, symbol: str, amount: float, price: Num = ..., params=...
    ): ...
    async def edit_limit_sell_order(
        self, id: str, symbol: str, amount: float, price: Num = ..., params=...
    ): ...
    async def edit_limit_order(
        self,
        id: str,
        symbol: str,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ): ...
    async def edit_order(
        self,
        id: str,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: Num = ...,
        price: Num = ...,
        params=...,
    ): ...
    async def edit_order_ws(
        self,
        id: str,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: Num = ...,
        price: Num = ...,
        params=...,
    ): ...
    async def fetch_position(self, symbol: str, params=...): ...
    async def fetch_position_ws(self, symbol: str, params=...): ...
    async def watch_position(self, symbol: Str = ..., params=...): ...
    async def watch_positions(
        self, symbols: Strings = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_position_for_symbols(
        self, symbols: Strings = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_positions_for_symbol(self, symbol: str, params=...):
        """
        fetches all open positions for specific symbol, unlike fetchPositions(which is designed to work with multiple symbols) so self method might be preffered for one-market position, because of less rate-limit consumption and speed
        :param str symbol: unified market symbol
        :param dict params: extra parameters specific to the endpoint
        :returns dict[]: a list of `position structure <https://docs.ccxt.com/#/?id=position-structure>` with maximum 3 items - possible one position for "one-way" mode, and possible two positions(long & short) for "two-way"(a.k.a. hedge) mode
        """
        ...

    async def fetch_positions_for_symbol_ws(self, symbol: str, params=...):
        """
        fetches all open positions for specific symbol, unlike fetchPositions(which is designed to work with multiple symbols) so self method might be preffered for one-market position, because of less rate-limit consumption and speed
        :param str symbol: unified market symbol
        :param dict params: extra parameters specific to the endpoint
        :returns dict[]: a list of `position structure <https://docs.ccxt.com/#/?id=position-structure>` with maximum 3 items - possible one position for "one-way" mode, and possible two positions(long & short) for "two-way"(a.k.a. hedge) mode
        """
        ...

    async def fetch_positions(self, symbols: Strings = ..., params=...): ...
    async def fetch_positions_ws(self, symbols: Strings = ..., params=...): ...
    async def fetch_positions_risk(self, symbols: Strings = ..., params=...): ...
    async def fetch_bids_asks(self, symbols: Strings = ..., params=...): ...
    async def fetch_borrow_interest(
        self,
        code: Str = ...,
        symbol: Str = ...,
        since: Int = ...,
        limit: Int = ...,
        params=...,
    ): ...
    async def fetch_ledger(
        self, code: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_ledger_entry(self, id: str, code: Str = ..., params=...): ...
    async def fetch_balance(self, params=...): ...
    async def fetch_balance_ws(self, params=...): ...
    async def watch_balance(self, params=...): ...
    async def fetch_partial_balance(self, part, params=...): ...
    async def fetch_free_balance(self, params=...): ...
    async def fetch_used_balance(self, params=...): ...
    async def fetch_total_balance(self, params=...): ...
    async def fetch_status(self, params=...): ...
    async def fetch_transaction_fee(self, code: str, params=...): ...
    async def fetch_transaction_fees(self, codes: Strings = ..., params=...): ...
    async def fetch_deposit_withdraw_fees(self, codes: Strings = ..., params=...): ...
    async def fetch_deposit_withdraw_fee(self, code: str, params=...): ...
    async def fetch_cross_borrow_rate(self, code: str, params=...): ...
    async def fetch_isolated_borrow_rate(self, symbol: str, params=...): ...
    async def fetch_ticker(self, symbol: str, params=...): ...
    async def fetch_mark_price(self, symbol: str, params=...): ...
    async def fetch_ticker_ws(self, symbol: str, params=...): ...
    async def watch_ticker(self, symbol: str, params=...): ...
    async def fetch_tickers(self, symbols: Strings = ..., params=...): ...
    async def fetch_mark_prices(self, symbols: Strings = ..., params=...): ...
    async def fetch_tickers_ws(self, symbols: Strings = ..., params=...): ...
    async def fetch_order_books(
        self, symbols: Strings = ..., limit: Int = ..., params=...
    ): ...
    async def watch_bids_asks(self, symbols: Strings = ..., params=...): ...
    async def watch_tickers(self, symbols: Strings = ..., params=...): ...
    async def un_watch_tickers(self, symbols: Strings = ..., params=...): ...
    async def fetch_order(self, id: str, symbol: Str = ..., params=...): ...
    async def fetch_order_ws(self, id: str, symbol: Str = ..., params=...): ...
    async def fetch_order_status(self, id: str, symbol: Str = ..., params=...): ...
    async def fetch_unified_order(self, order, params=...): ...
    async def create_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ): ...
    async def create_trailing_amount_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        trailingAmount=...,
        trailingTriggerPrice=...,
        params=...,
    ):
        """
        create a trailing order by providing the symbol, type, side, amount, price and trailingAmount
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency, or number of contracts
        :param float [price]: the price for the order to be filled at, in units of the quote currency, ignored in market orders
        :param float trailingAmount: the quote amount to trail away from the current market price
        :param float [trailingTriggerPrice]: the price to activate a trailing order, default uses the price argument
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_trailing_amount_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        trailingAmount=...,
        trailingTriggerPrice=...,
        params=...,
    ):
        """
        create a trailing order by providing the symbol, type, side, amount, price and trailingAmount
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency, or number of contracts
        :param float [price]: the price for the order to be filled at, in units of the quote currency, ignored in market orders
        :param float trailingAmount: the quote amount to trail away from the current market price
        :param float [trailingTriggerPrice]: the price to activate a trailing order, default uses the price argument
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_trailing_percent_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        trailingPercent=...,
        trailingTriggerPrice=...,
        params=...,
    ):
        """
        create a trailing order by providing the symbol, type, side, amount, price and trailingPercent
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency, or number of contracts
        :param float [price]: the price for the order to be filled at, in units of the quote currency, ignored in market orders
        :param float trailingPercent: the percent to trail away from the current market price
        :param float [trailingTriggerPrice]: the price to activate a trailing order, default uses the price argument
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_trailing_percent_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        trailingPercent=...,
        trailingTriggerPrice=...,
        params=...,
    ):
        """
        create a trailing order by providing the symbol, type, side, amount, price and trailingPercent
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency, or number of contracts
        :param float [price]: the price for the order to be filled at, in units of the quote currency, ignored in market orders
        :param float trailingPercent: the percent to trail away from the current market price
        :param float [trailingTriggerPrice]: the price to activate a trailing order, default uses the price argument
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_market_order_with_cost(
        self, symbol: str, side: OrderSide, cost: float, params=...
    ):
        """
        create a market order by providing the symbol, side and cost
        :param str symbol: unified symbol of the market to create an order in
        :param str side: 'buy' or 'sell'
        :param float cost: how much you want to trade in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_market_buy_order_with_cost(
        self, symbol: str, cost: float, params=...
    ):
        """
        create a market buy order by providing the symbol and cost
        :param str symbol: unified symbol of the market to create an order in
        :param float cost: how much you want to trade in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_market_sell_order_with_cost(
        self, symbol: str, cost: float, params=...
    ):
        """
        create a market sell order by providing the symbol and cost
        :param str symbol: unified symbol of the market to create an order in
        :param float cost: how much you want to trade in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_market_order_with_cost_ws(
        self, symbol: str, side: OrderSide, cost: float, params=...
    ):
        """
        create a market order by providing the symbol, side and cost
        :param str symbol: unified symbol of the market to create an order in
        :param str side: 'buy' or 'sell'
        :param float cost: how much you want to trade in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_trigger_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        triggerPrice: Num = ...,
        params=...,
    ):
        """
        create a trigger stop order(type 1)
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency or the number of contracts
        :param float [price]: the price to fulfill the order, in units of the quote currency, ignored in market orders
        :param float triggerPrice: the price to trigger the stop order, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_trigger_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        triggerPrice: Num = ...,
        params=...,
    ):
        """
        create a trigger stop order(type 1)
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency or the number of contracts
        :param float [price]: the price to fulfill the order, in units of the quote currency, ignored in market orders
        :param float triggerPrice: the price to trigger the stop order, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_stop_loss_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        stopLossPrice: Num = ...,
        params=...,
    ):
        """
        create a trigger stop loss order(type 2)
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency or the number of contracts
        :param float [price]: the price to fulfill the order, in units of the quote currency, ignored in market orders
        :param float stopLossPrice: the price to trigger the stop loss order, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_stop_loss_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        stopLossPrice: Num = ...,
        params=...,
    ):
        """
        create a trigger stop loss order(type 2)
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency or the number of contracts
        :param float [price]: the price to fulfill the order, in units of the quote currency, ignored in market orders
        :param float stopLossPrice: the price to trigger the stop loss order, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_take_profit_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        takeProfitPrice: Num = ...,
        params=...,
    ):
        """
        create a trigger take profit order(type 2)
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency or the number of contracts
        :param float [price]: the price to fulfill the order, in units of the quote currency, ignored in market orders
        :param float takeProfitPrice: the price to trigger the take profit order, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_take_profit_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        takeProfitPrice: Num = ...,
        params=...,
    ):
        """
        create a trigger take profit order(type 2)
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency or the number of contracts
        :param float [price]: the price to fulfill the order, in units of the quote currency, ignored in market orders
        :param float takeProfitPrice: the price to trigger the take profit order, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_order_with_take_profit_and_stop_loss(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        takeProfit: Num = ...,
        stopLoss: Num = ...,
        params=...,
    ):
        """
        create an order with a stop loss or take profit attached(type 3)
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency or the number of contracts
        :param float [price]: the price to fulfill the order, in units of the quote currency, ignored in market orders
        :param float [takeProfit]: the take profit price, in units of the quote currency
        :param float [stopLoss]: the stop loss price, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.takeProfitType]: *not available on all exchanges* 'limit' or 'market'
        :param str [params.stopLossType]: *not available on all exchanges* 'limit' or 'market'
        :param str [params.takeProfitPriceType]: *not available on all exchanges* 'last', 'mark' or 'index'
        :param str [params.stopLossPriceType]: *not available on all exchanges* 'last', 'mark' or 'index'
        :param float [params.takeProfitLimitPrice]: *not available on all exchanges* limit price for a limit take profit order
        :param float [params.stopLossLimitPrice]: *not available on all exchanges* stop loss for a limit stop loss order
        :param float [params.takeProfitAmount]: *not available on all exchanges* the amount for a take profit
        :param float [params.stopLossAmount]: *not available on all exchanges* the amount for a stop loss
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_order_with_take_profit_and_stop_loss_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        takeProfit: Num = ...,
        stopLoss: Num = ...,
        params=...,
    ):
        """
        create an order with a stop loss or take profit attached(type 3)
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency or the number of contracts
        :param float [price]: the price to fulfill the order, in units of the quote currency, ignored in market orders
        :param float [takeProfit]: the take profit price, in units of the quote currency
        :param float [stopLoss]: the stop loss price, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.takeProfitType]: *not available on all exchanges* 'limit' or 'market'
        :param str [params.stopLossType]: *not available on all exchanges* 'limit' or 'market'
        :param str [params.takeProfitPriceType]: *not available on all exchanges* 'last', 'mark' or 'index'
        :param str [params.stopLossPriceType]: *not available on all exchanges* 'last', 'mark' or 'index'
        :param float [params.takeProfitLimitPrice]: *not available on all exchanges* limit price for a limit take profit order
        :param float [params.stopLossLimitPrice]: *not available on all exchanges* stop loss for a limit stop loss order
        :param float [params.takeProfitAmount]: *not available on all exchanges* the amount for a take profit
        :param float [params.stopLossAmount]: *not available on all exchanges* the amount for a stop loss
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        ...

    async def create_orders(self, orders: List[OrderRequest], params=...): ...
    async def create_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ): ...
    async def cancel_order(self, id: str, symbol: Str = ..., params=...): ...
    async def cancel_order_ws(self, id: str, symbol: Str = ..., params=...): ...
    async def cancel_orders_ws(self, ids: List[str], symbol: Str = ..., params=...): ...
    async def cancel_all_orders(self, symbol: Str = ..., params=...): ...
    async def cancel_all_orders_after(self, timeout: Int, params=...): ...
    async def cancel_orders_for_symbols(
        self, orders: List[CancellationRequest], params=...
    ): ...
    async def cancel_all_orders_ws(self, symbol: Str = ..., params=...): ...
    async def cancel_unified_order(
        self, order, params=...
    ):  # -> Coroutine[Any, Any, NoReturn]:
        ...
    async def fetch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_orders_ws(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_order_trades(
        self, id: str, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_open_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_open_orders_ws(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_closed_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_canceled_and_closed_orders(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_closed_orders_ws(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_my_trades(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_my_liquidations(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_liquidations(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_my_trades_ws(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def watch_my_trades(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_greeks(self, symbol: str, params=...): ...
    async def fetch_option_chain(self, code: str, params=...): ...
    async def fetch_option(self, symbol: str, params=...): ...
    async def fetch_convert_quote(
        self, fromCode: str, toCode: str, amount: Num = ..., params=...
    ): ...
    async def fetch_deposits_withdrawals(
        self, code: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ):
        """
        fetch history of deposits and withdrawals
        :param str [code]: unified currency code for the currency of the deposit/withdrawals, default is None
        :param int [since]: timestamp in ms of the earliest deposit/withdrawal, default is None
        :param int [limit]: max number of deposit/withdrawals to return, default is None
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a list of `transaction structures <https://docs.ccxt.com/#/?id=transaction-structure>`
        """
        ...

    async def fetch_deposits(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_withdrawals(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_deposits_ws(
        self, code: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_withdrawals_ws(
        self, code: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_funding_rate_history(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def fetch_funding_history(
        self, symbol: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ): ...
    async def close_position(self, symbol: str, side: OrderSide = ..., params=...): ...
    async def close_all_positions(self, params=...): ...
    async def fetch_l3_order_book(self, symbol: str, limit: Int = ..., params=...): ...
    async def fetch_deposit_address(self, code: str, params=...): ...
    async def create_limit_order(
        self, symbol: str, side: OrderSide, amount: float, price: float, params=...
    ): ...
    async def create_limit_order_ws(
        self, symbol: str, side: OrderSide, amount: float, price: float, params=...
    ): ...
    async def create_market_order(
        self, symbol: str, side: OrderSide, amount: float, price: Num = ..., params=...
    ): ...
    async def create_market_order_ws(
        self, symbol: str, side: OrderSide, amount: float, price: Num = ..., params=...
    ): ...
    async def create_limit_buy_order(
        self, symbol: str, amount: float, price: float, params=...
    ): ...
    async def create_limit_buy_order_ws(
        self, symbol: str, amount: float, price: float, params=...
    ): ...
    async def create_limit_sell_order(
        self, symbol: str, amount: float, price: float, params=...
    ): ...
    async def create_limit_sell_order_ws(
        self, symbol: str, amount: float, price: float, params=...
    ): ...
    async def create_market_buy_order(self, symbol: str, amount: float, params=...): ...
    async def create_market_buy_order_ws(
        self, symbol: str, amount: float, params=...
    ): ...
    async def create_market_sell_order(
        self, symbol: str, amount: float, params=...
    ): ...
    async def create_market_sell_order_ws(
        self, symbol: str, amount: float, params=...
    ): ...
    async def load_time_difference(self, params=...): ...
    async def fetch_market_leverage_tiers(self, symbol: str, params=...): ...
    async def create_post_only_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ): ...
    async def create_post_only_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ): ...
    async def create_reduce_only_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ): ...
    async def create_reduce_only_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        params=...,
    ): ...
    async def create_stop_order(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        triggerPrice: Num = ...,
        params=...,
    ): ...
    async def create_stop_order_ws(
        self,
        symbol: str,
        type: OrderType,
        side: OrderSide,
        amount: float,
        price: Num = ...,
        triggerPrice: Num = ...,
        params=...,
    ): ...
    async def create_stop_limit_order(
        self,
        symbol: str,
        side: OrderSide,
        amount: float,
        price: float,
        triggerPrice: float,
        params=...,
    ): ...
    async def create_stop_limit_order_ws(
        self,
        symbol: str,
        side: OrderSide,
        amount: float,
        price: float,
        triggerPrice: float,
        params=...,
    ): ...
    async def create_stop_market_order(
        self,
        symbol: str,
        side: OrderSide,
        amount: float,
        triggerPrice: float,
        params=...,
    ): ...
    async def create_stop_market_order_ws(
        self,
        symbol: str,
        side: OrderSide,
        amount: float,
        triggerPrice: float,
        params=...,
    ): ...
    async def fetch_last_prices(self, symbols: Strings = ..., params=...): ...
    async def fetch_trading_fees(self, params=...): ...
    async def fetch_trading_fees_ws(self, params=...): ...
    async def fetch_trading_fee(self, symbol: str, params=...): ...
    async def fetch_convert_currencies(self, params=...): ...
    async def fetch_funding_rate(self, symbol: str, params=...): ...
    async def fetch_funding_interval(self, symbol: str, params=...): ...
    async def fetch_mark_ohlcv(
        self, symbol, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ):
        """
        fetches historical mark price candlestick data containing the open, high, low, and close price of a market
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns float[][]: A list of candles ordered, open, high, low, close, None
        """
        ...

    async def fetch_index_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ):
        """
               fetches historical index price candlestick data containing the open, high, low, and close price of a market
               :param str symbol: unified symbol of the market to fetch OHLCV data for
               :param str timeframe: the length of time each candle represents
               :param int [since]: timestamp in ms of the earliest candle to fetch
               :param int [limit]: the maximum amount of candles to fetch
               :param dict [params]: extra parameters specific to the exchange API endpoint
        @returns {} A list of candles ordered, open, high, low, close, None
        """
        ...

    async def fetch_premium_index_ohlcv(
        self, symbol: str, timeframe=..., since: Int = ..., limit: Int = ..., params=...
    ):
        """
        fetches historical premium index price candlestick data containing the open, high, low, and close price of a market
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns float[][]: A list of candles ordered, open, high, low, close, None
        """
        ...

    async def fetch_transactions(
        self, code: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ):
        """
        @deprecated
               *DEPRECATED* use fetchDepositsWithdrawals instead
               :param str code: unified currency code for the currency of the deposit/withdrawals, default is None
               :param int [since]: timestamp in ms of the earliest deposit/withdrawal, default is None
               :param int [limit]: max number of deposit/withdrawals to return, default is None
               :param dict [params]: extra parameters specific to the exchange API endpoint
               :returns dict: a list of `transaction structures <https://docs.ccxt.com/#/?id=transaction-structure>`
        """
        ...

    async def fetch_paginated_call_dynamic(
        self,
        method: str,
        symbol: Str = ...,
        since: Int = ...,
        limit: Int = ...,
        params=...,
        maxEntriesPerRequest: Int = ...,
        removeRepeated=...,
    ):  # -> list[Any] | list[object]:
        ...
    async def safe_deterministic_call(
        self,
        method: str,
        symbol: Str = ...,
        since: Int = ...,
        limit: Int = ...,
        timeframe: Str = ...,
        params=...,
    ):  # -> Any | list[Any]:
        ...
    async def fetch_paginated_call_deterministic(
        self,
        method: str,
        symbol: Str = ...,
        since: Int = ...,
        limit: Int = ...,
        timeframe: Str = ...,
        params=...,
        maxEntriesPerRequest=...,
    ):  # -> list[Any] | list[object]:
        ...
    async def fetch_paginated_call_cursor(
        self,
        method: str,
        symbol: Str = ...,
        since=...,
        limit=...,
        params=...,
        cursorReceived=...,
        cursorSent=...,
        cursorIncrement=...,
        maxEntriesPerRequest=...,
    ):  # -> list[Any] | list[object]:
        ...
    async def fetch_paginated_call_incremental(
        self,
        method: str,
        symbol: Str = ...,
        since=...,
        limit=...,
        params=...,
        pageKey=...,
        maxEntriesPerRequest=...,
    ):  # -> list[Any] | list[object]:
        ...
    async def fetch_position_history(
        self, symbol: str, since: Int = ..., limit: Int = ..., params=...
    ):
        """
        fetches the history of margin added or reduced from contract isolated positions
        :param str [symbol]: unified market symbol
        :param int [since]: timestamp in ms of the position
        :param int [limit]: the maximum amount of candles to fetch, default=1000
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns dict[]: a list of `position structures <https://docs.ccxt.com/#/?id=position-structure>`
        """
        ...

    async def fetch_positions_history(
        self, symbols: Strings = ..., since: Int = ..., limit: Int = ..., params=...
    ):
        """
        fetches the history of margin added or reduced from contract isolated positions
        :param str [symbol]: unified market symbol
        :param int [since]: timestamp in ms of the position
        :param int [limit]: the maximum amount of candles to fetch, default=1000
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns dict[]: a list of `position structures <https://docs.ccxt.com/#/?id=position-structure>`
        """
        ...

    async def fetch_transfer(self, id: str, code: Str = ..., params=...):
        """
        fetches a transfer
        :param str id: transfer id
        :param [str] code: unified currency code
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns dict: a `transfer structure <https://docs.ccxt.com/#/?id=transfer-structure>`
        """
        ...

    async def fetch_transfers(
        self, code: Str = ..., since: Int = ..., limit: Int = ..., params=...
    ):
        """
        fetches a transfer
        :param str id: transfer id
        :param int [since]: timestamp in ms of the earliest transfer to fetch
        :param int [limit]: the maximum amount of transfers to fetch
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns dict: a `transfer structure <https://docs.ccxt.com/#/?id=transfer-structure>`
        """
        ...
