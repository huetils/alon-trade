"""
This type stub file was generated by pyright.
"""

from plotext._dict import *

def round(n, d=...):
    ...

def mean(x, y, p=...):
    ...

def replace(data, data2, element=...): # -> list[Any]:
    ...

def try_float(data): # -> float:
    ...

def quantile(data, q):
    ...

def linspace(lower, upper, length=...): # -> list[Any]:
    ...

def sin(periods=..., length=..., amplitude=..., phase=..., decay=...): # -> list[float]:
    ...

def square(periods=..., length=..., amplitude=...): # -> list[int]:
    ...

def to_list(data, length): # -> list[Any]:
    ...

def difference(data1, data2): # -> list[Any]:
    ...

def log(data): # -> list[float] | float:
    ...

def power10(data): # -> list[Any]:
    ...

def floor(data): # -> list[Any]:
    ...

def repeat(data, length): # -> list[Any]:
    ...

def no_duplicates(data): # -> list[Any]:
    ...

def join(data): # -> list[Any]:
    ...

def cumsum(data): # -> list[int]:
    ...

def matrix_size(matrix): # -> list[int]:
    ...

def transpose(data, length=...): # -> list[list[Any]]:
    ...

def vstack(matrix, extra):
    ...

def hstack(matrix, extra): # -> list[Any]:
    ...

def turn_gray(matrix): # -> list[list[tuple[int, ...] | tuple[Literal[127], Literal[127], Literal[127]]]]:
    ...

def brush(*lists): # -> list[list[Any]]:
    ...

nl = ...
def only_spaces(string): # -> bool:
    ...

def format_time(time): # -> str:
    ...

positive_color = ...
negative_color = ...
title_color = ...
def format_strings(string1, string2, color=...):
    ...

def correct_coord(string, label, coord): # -> int:
    ...

def no_char_duplicates(string, char):
    ...

def read_lines(text, delimiter=..., columns=...): # -> list[Any]:
    ...

def pad_string(num, length):
    ...

def max_length(strings): # -> int:
    ...

def correct_path(path): # -> str:
    ...

def is_file(path, log=...): # -> bool:
    ...

def script_folder(): # -> str:
    ...

def parent_folder(path, level=...): # -> str:
    ...

def join_paths(*args):
    ...

def delete_file(path, log=...): # -> None:
    ...

def read_data(path, delimiter=..., columns=..., first_row=..., log=...): # -> list[Any]:
    ...

def write_data(data, path, delimiter=..., columns=..., log=...): # -> None:
    ...

def save_text(text, path, append=..., log=...): # -> None:
    ...

def download(url, path, log=...): # -> None:
    ...

def is_ipython(): # -> bool:
    ...

def platform(): # -> Literal['windows', 'unix']:
    ...

platform = ...
if platform == "windows":
    ...
def terminal_size(): # -> list[int] | list[None]:
    ...

terminal_width = ...
tw = ...
terminal_height = ...
th = ...
def clear_terminal(lines=...): # -> None:
    ...

def write(string): # -> None:
    ...

class memorize:
    def __init__(self, f) -> None:
        ...
    
    def __call__(self, *args):
        ...
    


space = ...
plot_marker = ...
hd_markers = ...
fhd_markers = ...
braille_markers = ...
simple_bar_marker = ...
@memorize
def get_hd_marker(code): # -> str:
    ...

def marker_factor(marker, hd, fhd, braille): # -> Literal[1]:
    ...

def get_color_code(color): # -> int:
    ...

def get_color_name(code): # -> str:
    ...

def is_string_color(color): # -> bool:
    ...

def is_integer_color(color): # -> bool:
    ...

def is_rgb_color(color): # -> bool:
    ...

def is_color(color): # -> bool:
    ...

def colorize(string, color=..., style=..., background=..., show=...):
    ...

def uncolorize(string):
    ...

def apply_ansi(string, color, character):
    ...

ansi_begin = ...
ansi_end = ...
@memorize
def colors_to_ansi(fullground, style, background): # -> LiteralString:
    ...

@memorize
def ansi(color, character): # -> list[str]:
    ...

def to_rgb(color): # -> tuple[int, int, int] | int:
    ...

no_style = ...
styles = ...
info_style = ...
def get_style_code(style): # -> int:
    ...

def get_style_codes(style): # -> list[int]:
    ...

def get_style_name(code): # -> str:
    ...

def clean_styles(style): # -> str:
    ...

def is_style(style): # -> bool:
    ...

def set_data(x=..., y=...): # -> list[Any]:
    ...

def set_sizes(sizes, size_max):
    ...

def fit_sizes(sizes, size_max):
    ...

def get_first(data, test=...):
    ...

def apply_scale(data, test=...): # -> list[float] | float:
    ...

def reverse_scale(data, test=...): # -> list[Any]:
    ...

def replace_none(data, num_data): # -> list[Any]:
    ...

numerical = ...
all_numerical = ...
def get_lim(data): # -> list[Any | int | float]:
    ...

def get_matrix_data(data, lim, bins): # -> list[Any]:
    ...

def get_lines(x, y, *other): # -> list[Any | list[Any]]:
    ...

def get_line(x, y): # -> tuple[Any, Any] | list[list[int]]:
    ...

def get_fill_level(fill, lim, bins): # -> str | Literal[False]:
    ...

def find_filling_values(x, y, y0): # -> tuple[list[Any], list[Any], list[Any]]:
    ...

def get_fill_boundaries(x, y): # -> list[Any]:
    ...

def fill_data(x, y, y0, *other): # -> list[list[Any]]:
    ...

def remove_outsiders(x, y, width, height, *other): # -> list[list[Any]]:
    ...

def get_labels(ticks): # -> list[str]:
    ...

def distinguishing_digit(data): # -> int:
    ...

def add_extra_zeros(label, d):
    ...

def add_extra_spaces(labels, side): # -> list[Any]:
    ...

def hd_group(x, y, xf, yf): # -> tuple[list[Any], list[Any], list[tuple[Any, ...]]]:
    ...

def bars(x, y, width, minimum): # -> tuple[list[Any], list[Any]]:
    ...

def set_multiple_bar_data(*args): # -> tuple[list[int] | Any, list[Any | list[Any]] | list[Any]]:
    ...

def hist_data(data, bins=..., norm=...): # -> tuple[list[Any | float | int], list[float] | list[int]]:
    ...

def single_bar(x, y, ylabel, marker, colors):
    ...

def bar_data(*args, width=..., mode=...): # -> tuple[list[str], list[int] | list[Any | list[Any]] | list[Any], list[list[Any]], int]:
    ...

def correct_marker(marker=...): # -> str:
    ...

def get_title(title, width): # -> Literal['']:
    ...

def get_simple_labels(marker, labels, colors, width): # -> LiteralString | Literal['\n']:
    ...

def box(x, y, width, minimum): # -> tuple[list[Any], list[Any], list[Any], list[Any], list[Any], list[Any], list[Any]]:
    ...

def update_size(size_old, size_new): # -> list[int]:
    ...

def image_to_matrix(image): # -> list[list[Any]]:
    ...

