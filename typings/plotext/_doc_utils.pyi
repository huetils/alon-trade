"""
This type stub file was generated by pyright.
"""

method_name_color = ...
method_name_style = ...
alias_style = ...
parameters_title_color = ...
parameters_title_style = ...
parameter_name_color = ...
parameter_name_style = ...
parameter_specs_color = ...
parameter_specs_style = ...
parameter_doc_style = ...
return_color = ...
return_style = ...
warning = ...
nl = ...
sp = ...
cm = ...
sc = ...
def correct_doc(doc): # -> str:
   ...

class parameter_class:
   def __init__(self, name, doc=..., type=..., default=...) -> None:
      ...
   
   def set_default(self, default=...): # -> None:
      ...
   
   def get_doc(self):
      ...
   
   def copy(self, default=...): # -> Self:
      ...
   


class parameters_class:
   def __init__(self) -> None:
      ...
   
   def append(self, parameter): # -> None:
      ...
   
   def add(self, name, doc=..., type=..., default=...): # -> None:
      ...
   
   def get_title(self):
      ...
   
   def get_doc(self): # -> Literal['']:
      ...
   
   def get_parameter(self, name): # -> None:
      ...
   


class output_class:
   def __init__(self, doc=..., type=...) -> None:
      ...
   
   def get_doc(self): # -> Literal['']:
      ...
   


class method_class:
   def __init__(self, name, alias=...) -> None:
      ...
   
   def set_doc(self, doc=...): # -> None:
      ...
   
   def set_output(self, doc=..., type=...): # -> None:
      ...
   
   def append_parameter(self, parameter_object): # -> None:
      ...
   
   def add_parameter(self, name, doc=..., type=..., default=...): # -> None:
      ...
   
   def get_title(self):
      ...
   
   def get_doc(self): # -> str:
      ...
   
   def get_parameters(self): # -> list[Any]:
      ...
   
   def get_parameter(self, name): # -> None:
      ...
   
   def show(self): # -> None:
      ...
   


def get_parameters(method): # -> list[str]:
   ...

class documentation_class:
   "It contains the doc-strings of all the main plotext functions."
   def __init__(self) -> None:
      ...
   
   def all(self): # -> None:
      ...
   


class parameter_types:
   def __init__(self) -> None:
      ...
   
   def plural(self, type, n=...):
      ...
   
   def mix(self, *types): # -> LiteralString:
      ...
   


documentation = ...
method = ...
doc = ...
par = ...
past = ...
out = ...
past_out = ...
add = ...
t = ...
